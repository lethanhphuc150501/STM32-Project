/*
 * input_processing.c
 *
 *  Created on: Jul 25, 2023
 *      Author: Phuc Le
 */

#include "input_processing.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

int mode = 1;
int red_value, yellow_value, green_value;
int red_draft, yellow_draft, green_draft;

void LedTimeDurationInit() {
	red_value = RED_INIT;
	yellow_value = YELLOW_INIT;
	green_value = GREEN_INIT;
	red_draft = red_value;
	yellow_draft = yellow_value;
	green_draft = green_value;
}

void UpdateMode() {
	switch (buttonState[0]) {
		case BUTTON_RELEASED:
			if (is_button_pressed(0)) {
				buttonState[0] = BUTTON_PRESSED;
				mode++;
				if (mode > 4) mode = 1;
			}
			break;
		case BUTTON_PRESSED:
			if (!is_button_pressed(0)) {
				buttonState[0] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
	}
}
int getMode() {
	return mode;
}

void increaseDraftValue() {
	switch (mode) {
		case 2:
			red_draft++;
			if (red_draft > 99) red_draft = 0;
			break;
		case 3:
			yellow_draft++;
			if (yellow_draft > 99) yellow_draft = 0;
			break;
		case 4:
			green_draft++;
			if (green_draft > 99) green_draft = 0;
			break;
		default:
			break;
	}
}

void UpgradeRedValue() {
	switch (buttonState[1]) {
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
				buttonState[1] = BUTTON_PRESSED;
				increaseDraftValue();
			}
			break;
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
				buttonState[1] = BUTTON_RELEASED;
			}
			if (!is_button_pressed_1s(1)) {
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				increaseDraftValue();
			}
			break;
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
				buttonState[1] = BUTTON_RELEASED;
			}
			if (is_button_held(1)) {
				reset_flagForButtonHold(1);
				increaseDraftValue();
			}
			break;
		default:
			break;
	}
}

/*
void fsm_for_input_processing(void)
{
	switch(buttonState[2])
	{
		case BUTTON_RELEASED:
			if (is_button_pressed(0))
			{
				buttonState = BUTTON_PRESSED;
			}
			break;
		case BUTTON_PRESSED:
			if (!is_button_pressed(0))
			{
				buttonState = BUTTON_RELEASED;
			}
			else
			{
				if (is_button_pressed_1s(0))
				{
					buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(0))
			{
				buttonState = BUTTON_RELEASED;
			}

			//TO DO
			if (is_button_held(0))
			{
				reset_flagForButtonHold(0);
			}
			break;
	}
}
*/
