
CustomizableTrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000001c  08002d78  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002d78  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000923f  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb0  00000000  00000000  00029284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa2  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3cc  00000000  00000000  00042cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082419  00000000  00000000  0004e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d04d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e0  00000000  00000000  000d0528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d18 	.word	0x08002d18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002d18 	.word	0x08002d18

0800014c <display7SEG>:

#include "led_display.h"

enum LEDState {RED, YELLOW, GREEN};

static void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b5      	ldr	r0, [pc, #724]	; (8000468 <display7SEG+0x31c>)
 8000192:	f001 fd9e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b3      	ldr	r0, [pc, #716]	; (8000468 <display7SEG+0x31c>)
 800019c:	f001 fd99 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48b0      	ldr	r0, [pc, #704]	; (8000468 <display7SEG+0x31c>)
 80001a6:	f001 fd94 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ae      	ldr	r0, [pc, #696]	; (8000468 <display7SEG+0x31c>)
 80001b0:	f001 fd8f 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48ab      	ldr	r0, [pc, #684]	; (8000468 <display7SEG+0x31c>)
 80001ba:	f001 fd8a 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a9      	ldr	r0, [pc, #676]	; (8000468 <display7SEG+0x31c>)
 80001c4:	f001 fd85 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a6      	ldr	r0, [pc, #664]	; (8000468 <display7SEG+0x31c>)
 80001ce:	f001 fd80 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80001d2:	e144      	b.n	800045e <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a3      	ldr	r0, [pc, #652]	; (8000468 <display7SEG+0x31c>)
 80001da:	f001 fd7a 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a1      	ldr	r0, [pc, #644]	; (8000468 <display7SEG+0x31c>)
 80001e4:	f001 fd75 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489e      	ldr	r0, [pc, #632]	; (8000468 <display7SEG+0x31c>)
 80001ee:	f001 fd70 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489c      	ldr	r0, [pc, #624]	; (8000468 <display7SEG+0x31c>)
 80001f8:	f001 fd6b 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4899      	ldr	r0, [pc, #612]	; (8000468 <display7SEG+0x31c>)
 8000202:	f001 fd66 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4897      	ldr	r0, [pc, #604]	; (8000468 <display7SEG+0x31c>)
 800020c:	f001 fd61 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4894      	ldr	r0, [pc, #592]	; (8000468 <display7SEG+0x31c>)
 8000216:	f001 fd5c 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800021a:	e120      	b.n	800045e <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4891      	ldr	r0, [pc, #580]	; (8000468 <display7SEG+0x31c>)
 8000222:	f001 fd56 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488f      	ldr	r0, [pc, #572]	; (8000468 <display7SEG+0x31c>)
 800022c:	f001 fd51 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488c      	ldr	r0, [pc, #560]	; (8000468 <display7SEG+0x31c>)
 8000236:	f001 fd4c 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	488a      	ldr	r0, [pc, #552]	; (8000468 <display7SEG+0x31c>)
 8000240:	f001 fd47 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4887      	ldr	r0, [pc, #540]	; (8000468 <display7SEG+0x31c>)
 800024a:	f001 fd42 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4885      	ldr	r0, [pc, #532]	; (8000468 <display7SEG+0x31c>)
 8000254:	f001 fd3d 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4882      	ldr	r0, [pc, #520]	; (8000468 <display7SEG+0x31c>)
 800025e:	f001 fd38 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 8000262:	e0fc      	b.n	800045e <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487f      	ldr	r0, [pc, #508]	; (8000468 <display7SEG+0x31c>)
 800026a:	f001 fd32 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487d      	ldr	r0, [pc, #500]	; (8000468 <display7SEG+0x31c>)
 8000274:	f001 fd2d 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	487a      	ldr	r0, [pc, #488]	; (8000468 <display7SEG+0x31c>)
 800027e:	f001 fd28 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4878      	ldr	r0, [pc, #480]	; (8000468 <display7SEG+0x31c>)
 8000288:	f001 fd23 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4875      	ldr	r0, [pc, #468]	; (8000468 <display7SEG+0x31c>)
 8000292:	f001 fd1e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4873      	ldr	r0, [pc, #460]	; (8000468 <display7SEG+0x31c>)
 800029c:	f001 fd19 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4870      	ldr	r0, [pc, #448]	; (8000468 <display7SEG+0x31c>)
 80002a6:	f001 fd14 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d8      	b.n	800045e <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486d      	ldr	r0, [pc, #436]	; (8000468 <display7SEG+0x31c>)
 80002b2:	f001 fd0e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486b      	ldr	r0, [pc, #428]	; (8000468 <display7SEG+0x31c>)
 80002bc:	f001 fd09 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4868      	ldr	r0, [pc, #416]	; (8000468 <display7SEG+0x31c>)
 80002c6:	f001 fd04 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4866      	ldr	r0, [pc, #408]	; (8000468 <display7SEG+0x31c>)
 80002d0:	f001 fcff 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4863      	ldr	r0, [pc, #396]	; (8000468 <display7SEG+0x31c>)
 80002da:	f001 fcfa 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4861      	ldr	r0, [pc, #388]	; (8000468 <display7SEG+0x31c>)
 80002e4:	f001 fcf5 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485e      	ldr	r0, [pc, #376]	; (8000468 <display7SEG+0x31c>)
 80002ee:	f001 fcf0 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b4      	b.n	800045e <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485b      	ldr	r0, [pc, #364]	; (8000468 <display7SEG+0x31c>)
 80002fa:	f001 fcea 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <display7SEG+0x31c>)
 8000304:	f001 fce5 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4856      	ldr	r0, [pc, #344]	; (8000468 <display7SEG+0x31c>)
 800030e:	f001 fce0 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4854      	ldr	r0, [pc, #336]	; (8000468 <display7SEG+0x31c>)
 8000318:	f001 fcdb 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <display7SEG+0x31c>)
 8000322:	f001 fcd6 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484f      	ldr	r0, [pc, #316]	; (8000468 <display7SEG+0x31c>)
 800032c:	f001 fcd1 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484c      	ldr	r0, [pc, #304]	; (8000468 <display7SEG+0x31c>)
 8000336:	f001 fccc 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800033a:	e090      	b.n	800045e <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <display7SEG+0x31c>)
 8000342:	f001 fcc6 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4847      	ldr	r0, [pc, #284]	; (8000468 <display7SEG+0x31c>)
 800034c:	f001 fcc1 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4844      	ldr	r0, [pc, #272]	; (8000468 <display7SEG+0x31c>)
 8000356:	f001 fcbc 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4842      	ldr	r0, [pc, #264]	; (8000468 <display7SEG+0x31c>)
 8000360:	f001 fcb7 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483f      	ldr	r0, [pc, #252]	; (8000468 <display7SEG+0x31c>)
 800036a:	f001 fcb2 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483d      	ldr	r0, [pc, #244]	; (8000468 <display7SEG+0x31c>)
 8000374:	f001 fcad 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	483a      	ldr	r0, [pc, #232]	; (8000468 <display7SEG+0x31c>)
 800037e:	f001 fca8 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 8000382:	e06c      	b.n	800045e <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4837      	ldr	r0, [pc, #220]	; (8000468 <display7SEG+0x31c>)
 800038a:	f001 fca2 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4835      	ldr	r0, [pc, #212]	; (8000468 <display7SEG+0x31c>)
 8000394:	f001 fc9d 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4832      	ldr	r0, [pc, #200]	; (8000468 <display7SEG+0x31c>)
 800039e:	f001 fc98 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <display7SEG+0x31c>)
 80003a8:	f001 fc93 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <display7SEG+0x31c>)
 80003b2:	f001 fc8e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <display7SEG+0x31c>)
 80003bc:	f001 fc89 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4828      	ldr	r0, [pc, #160]	; (8000468 <display7SEG+0x31c>)
 80003c6:	f001 fc84 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80003ca:	e048      	b.n	800045e <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <display7SEG+0x31c>)
 80003d2:	f001 fc7e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4823      	ldr	r0, [pc, #140]	; (8000468 <display7SEG+0x31c>)
 80003dc:	f001 fc79 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4820      	ldr	r0, [pc, #128]	; (8000468 <display7SEG+0x31c>)
 80003e6:	f001 fc74 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <display7SEG+0x31c>)
 80003f0:	f001 fc6f 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481b      	ldr	r0, [pc, #108]	; (8000468 <display7SEG+0x31c>)
 80003fa:	f001 fc6a 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4819      	ldr	r0, [pc, #100]	; (8000468 <display7SEG+0x31c>)
 8000404:	f001 fc65 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <display7SEG+0x31c>)
 800040e:	f001 fc60 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 8000412:	e024      	b.n	800045e <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <display7SEG+0x31c>)
 800041a:	f001 fc5a 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <display7SEG+0x31c>)
 8000424:	f001 fc55 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <display7SEG+0x31c>)
 800042e:	f001 fc50 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <display7SEG+0x31c>)
 8000438:	f001 fc4b 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <display7SEG+0x31c>)
 8000442:	f001 fc46 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <display7SEG+0x31c>)
 800044c:	f001 fc41 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <display7SEG+0x31c>)
 8000456:	f001 fc3c 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800045a:	e000      	b.n	800045e <display7SEG+0x312>
		  default:
			  break;
 800045c:	bf00      	nop
	}
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800

0800046c <resetCountValue>:
int count1 = RED_INIT;
int count2 = GREEN_INIT;
enum LEDState state1 = RED;
enum LEDState state2 = GREEN;

void resetCountValue() {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	count1 = red_value;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <resetCountValue+0x28>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <resetCountValue+0x2c>)
 8000476:	6013      	str	r3, [r2, #0]
	count2 = green_value;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <resetCountValue+0x30>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <resetCountValue+0x34>)
 800047e:	6013      	str	r3, [r2, #0]
	state1 = RED;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <resetCountValue+0x38>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <resetCountValue+0x3c>)
 8000488:	2202      	movs	r2, #2
 800048a:	701a      	strb	r2, [r3, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000040 	.word	0x20000040
 8000498:	20000000 	.word	0x20000000
 800049c:	20000048 	.word	0x20000048
 80004a0:	20000004 	.word	0x20000004
 80004a4:	20000038 	.word	0x20000038
 80004a8:	20000008 	.word	0x20000008

080004ac <NormalMode>:

void NormalMode() {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	count1--;
 80004b0:	4bab      	ldr	r3, [pc, #684]	; (8000760 <NormalMode+0x2b4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4aaa      	ldr	r2, [pc, #680]	; (8000760 <NormalMode+0x2b4>)
 80004b8:	6013      	str	r3, [r2, #0]
	count2--;
 80004ba:	4baa      	ldr	r3, [pc, #680]	; (8000764 <NormalMode+0x2b8>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4aa8      	ldr	r2, [pc, #672]	; (8000764 <NormalMode+0x2b8>)
 80004c2:	6013      	str	r3, [r2, #0]
	switch (state1) {
 80004c4:	4ba8      	ldr	r3, [pc, #672]	; (8000768 <NormalMode+0x2bc>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d069      	beq.n	80005a0 <NormalMode+0xf4>
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	f300 8098 	bgt.w	8000602 <NormalMode+0x156>
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <NormalMode+0x30>
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d031      	beq.n	800053e <NormalMode+0x92>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
			}
			break;
		default:
			break;
 80004da:	e092      	b.n	8000602 <NormalMode+0x156>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e2:	48a2      	ldr	r0, [pc, #648]	; (800076c <NormalMode+0x2c0>)
 80004e4:	f001 fbf5 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	489f      	ldr	r0, [pc, #636]	; (800076c <NormalMode+0x2c0>)
 80004f0:	f001 fbef 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	489c      	ldr	r0, [pc, #624]	; (800076c <NormalMode+0x2c0>)
 80004fc:	f001 fbe9 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count1 < 0) {
 8000500:	4b97      	ldr	r3, [pc, #604]	; (8000760 <NormalMode+0x2b4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	da7e      	bge.n	8000606 <NormalMode+0x15a>
				count1 = green_value - 1;
 8000508:	4b99      	ldr	r3, [pc, #612]	; (8000770 <NormalMode+0x2c4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3b01      	subs	r3, #1
 800050e:	4a94      	ldr	r2, [pc, #592]	; (8000760 <NormalMode+0x2b4>)
 8000510:	6013      	str	r3, [r2, #0]
				state1 = GREEN;
 8000512:	4b95      	ldr	r3, [pc, #596]	; (8000768 <NormalMode+0x2bc>)
 8000514:	2202      	movs	r2, #2
 8000516:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	4893      	ldr	r0, [pc, #588]	; (800076c <NormalMode+0x2c0>)
 8000520:	f001 fbd7 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4890      	ldr	r0, [pc, #576]	; (800076c <NormalMode+0x2c0>)
 800052c:	f001 fbd1 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000536:	488d      	ldr	r0, [pc, #564]	; (800076c <NormalMode+0x2c0>)
 8000538:	f001 fbcb 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800053c:	e063      	b.n	8000606 <NormalMode+0x15a>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4889      	ldr	r0, [pc, #548]	; (800076c <NormalMode+0x2c0>)
 8000546:	f001 fbc4 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	4886      	ldr	r0, [pc, #536]	; (800076c <NormalMode+0x2c0>)
 8000552:	f001 fbbe 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	4883      	ldr	r0, [pc, #524]	; (800076c <NormalMode+0x2c0>)
 800055e:	f001 fbb8 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count1 < 0) {
 8000562:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <NormalMode+0x2b4>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	da4f      	bge.n	800060a <NormalMode+0x15e>
				count1 = red_value - 1;
 800056a:	4b82      	ldr	r3, [pc, #520]	; (8000774 <NormalMode+0x2c8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	4a7b      	ldr	r2, [pc, #492]	; (8000760 <NormalMode+0x2b4>)
 8000572:	6013      	str	r3, [r2, #0]
				state1 = RED;
 8000574:	4b7c      	ldr	r3, [pc, #496]	; (8000768 <NormalMode+0x2bc>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000580:	487a      	ldr	r0, [pc, #488]	; (800076c <NormalMode+0x2c0>)
 8000582:	f001 fba6 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	4877      	ldr	r0, [pc, #476]	; (800076c <NormalMode+0x2c0>)
 800058e:	f001 fba0 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	4874      	ldr	r0, [pc, #464]	; (800076c <NormalMode+0x2c0>)
 800059a:	f001 fb9a 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800059e:	e034      	b.n	800060a <NormalMode+0x15e>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a6:	4871      	ldr	r0, [pc, #452]	; (800076c <NormalMode+0x2c0>)
 80005a8:	f001 fb93 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	486e      	ldr	r0, [pc, #440]	; (800076c <NormalMode+0x2c0>)
 80005b4:	f001 fb8d 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	486b      	ldr	r0, [pc, #428]	; (800076c <NormalMode+0x2c0>)
 80005c0:	f001 fb87 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count1 < 0) {
 80005c4:	4b66      	ldr	r3, [pc, #408]	; (8000760 <NormalMode+0x2b4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da20      	bge.n	800060e <NormalMode+0x162>
				count1 = yellow_value - 1;
 80005cc:	4b6a      	ldr	r3, [pc, #424]	; (8000778 <NormalMode+0x2cc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a63      	ldr	r2, [pc, #396]	; (8000760 <NormalMode+0x2b4>)
 80005d4:	6013      	str	r3, [r2, #0]
				state1 = YELLOW;
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <NormalMode+0x2bc>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4862      	ldr	r0, [pc, #392]	; (800076c <NormalMode+0x2c0>)
 80005e4:	f001 fb75 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	485f      	ldr	r0, [pc, #380]	; (800076c <NormalMode+0x2c0>)
 80005f0:	f001 fb6f 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	485c      	ldr	r0, [pc, #368]	; (800076c <NormalMode+0x2c0>)
 80005fc:	f001 fb69 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 8000600:	e005      	b.n	800060e <NormalMode+0x162>
			break;
 8000602:	bf00      	nop
 8000604:	e004      	b.n	8000610 <NormalMode+0x164>
			break;
 8000606:	bf00      	nop
 8000608:	e002      	b.n	8000610 <NormalMode+0x164>
			break;
 800060a:	bf00      	nop
 800060c:	e000      	b.n	8000610 <NormalMode+0x164>
			break;
 800060e:	bf00      	nop
	}
	switch (state2) {
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <NormalMode+0x2d0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d069      	beq.n	80006ec <NormalMode+0x240>
 8000618:	2b02      	cmp	r3, #2
 800061a:	f300 8098 	bgt.w	800074e <NormalMode+0x2a2>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <NormalMode+0x17c>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d031      	beq.n	800068a <NormalMode+0x1de>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
			}
			break;
		default:
			break;
 8000626:	e092      	b.n	800074e <NormalMode+0x2a2>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062e:	484f      	ldr	r0, [pc, #316]	; (800076c <NormalMode+0x2c0>)
 8000630:	f001 fb4f 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	484c      	ldr	r0, [pc, #304]	; (800076c <NormalMode+0x2c0>)
 800063c:	f001 fb49 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4849      	ldr	r0, [pc, #292]	; (800076c <NormalMode+0x2c0>)
 8000648:	f001 fb43 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count2 < 0) {
 800064c:	4b45      	ldr	r3, [pc, #276]	; (8000764 <NormalMode+0x2b8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da7e      	bge.n	8000752 <NormalMode+0x2a6>
				count2 = green_value - 1;
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <NormalMode+0x2c4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a42      	ldr	r2, [pc, #264]	; (8000764 <NormalMode+0x2b8>)
 800065c:	6013      	str	r3, [r2, #0]
				state2 = GREEN;
 800065e:	4b47      	ldr	r3, [pc, #284]	; (800077c <NormalMode+0x2d0>)
 8000660:	2202      	movs	r2, #2
 8000662:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066a:	4840      	ldr	r0, [pc, #256]	; (800076c <NormalMode+0x2c0>)
 800066c:	f001 fb31 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	483d      	ldr	r0, [pc, #244]	; (800076c <NormalMode+0x2c0>)
 8000678:	f001 fb2b 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	483a      	ldr	r0, [pc, #232]	; (800076c <NormalMode+0x2c0>)
 8000684:	f001 fb25 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 8000688:	e063      	b.n	8000752 <NormalMode+0x2a6>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	4836      	ldr	r0, [pc, #216]	; (800076c <NormalMode+0x2c0>)
 8000692:	f001 fb1e 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	4833      	ldr	r0, [pc, #204]	; (800076c <NormalMode+0x2c0>)
 800069e:	f001 fb18 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a8:	4830      	ldr	r0, [pc, #192]	; (800076c <NormalMode+0x2c0>)
 80006aa:	f001 fb12 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count2 < 0) {
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <NormalMode+0x2b8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da4f      	bge.n	8000756 <NormalMode+0x2aa>
				count2 = red_value - 1;
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <NormalMode+0x2c8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a29      	ldr	r2, [pc, #164]	; (8000764 <NormalMode+0x2b8>)
 80006be:	6013      	str	r3, [r2, #0]
				state2 = RED;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <NormalMode+0x2d0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4827      	ldr	r0, [pc, #156]	; (800076c <NormalMode+0x2c0>)
 80006ce:	f001 fb00 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4824      	ldr	r0, [pc, #144]	; (800076c <NormalMode+0x2c0>)
 80006da:	f001 fafa 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <NormalMode+0x2c0>)
 80006e6:	f001 faf4 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 80006ea:	e034      	b.n	8000756 <NormalMode+0x2aa>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <NormalMode+0x2c0>)
 80006f4:	f001 faed 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <NormalMode+0x2c0>)
 8000700:	f001 fae7 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	4818      	ldr	r0, [pc, #96]	; (800076c <NormalMode+0x2c0>)
 800070c:	f001 fae1 	bl	8001cd2 <HAL_GPIO_WritePin>
			if (count2 < 0) {
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <NormalMode+0x2b8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	da20      	bge.n	800075a <NormalMode+0x2ae>
				count2 = yellow_value - 1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <NormalMode+0x2cc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <NormalMode+0x2b8>)
 8000720:	6013      	str	r3, [r2, #0]
				state2 = YELLOW;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <NormalMode+0x2d0>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <NormalMode+0x2c0>)
 8000730:	f001 facf 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <NormalMode+0x2c0>)
 800073c:	f001 fac9 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <NormalMode+0x2c0>)
 8000748:	f001 fac3 	bl	8001cd2 <HAL_GPIO_WritePin>
			break;
 800074c:	e005      	b.n	800075a <NormalMode+0x2ae>
			break;
 800074e:	bf00      	nop
 8000750:	e004      	b.n	800075c <NormalMode+0x2b0>
			break;
 8000752:	bf00      	nop
 8000754:	e002      	b.n	800075c <NormalMode+0x2b0>
			break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <NormalMode+0x2b0>
			break;
 800075a:	bf00      	nop
	}

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004
 8000768:	20000038 	.word	0x20000038
 800076c:	40010c00 	.word	0x40010c00
 8000770:	20000048 	.word	0x20000048
 8000774:	20000040 	.word	0x20000040
 8000778:	20000044 	.word	0x20000044
 800077c:	20000008 	.word	0x20000008

08000780 <get7SEG1Value>:

static int get7SEG1Value() {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	switch (mode) {
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <get7SEG1Value+0x48>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	2b03      	cmp	r3, #3
 800078c:	d816      	bhi.n	80007bc <get7SEG1Value+0x3c>
 800078e:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <get7SEG1Value+0x14>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007ab 	.word	0x080007ab
 800079c:	080007b1 	.word	0x080007b1
 80007a0:	080007b7 	.word	0x080007b7
		case 1:
			return count1;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <get7SEG1Value+0x4c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	e00a      	b.n	80007c0 <get7SEG1Value+0x40>
		case 2:
			return red_draft;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <get7SEG1Value+0x50>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	e007      	b.n	80007c0 <get7SEG1Value+0x40>
		case 3:
			return yellow_draft;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <get7SEG1Value+0x54>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	e004      	b.n	80007c0 <get7SEG1Value+0x40>
		case 4:
			return green_draft;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <get7SEG1Value+0x58>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	e001      	b.n	80007c0 <get7SEG1Value+0x40>
		default:
			break;
 80007bc:	bf00      	nop
	}
	return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000000 	.word	0x20000000
 80007d0:	2000004c 	.word	0x2000004c
 80007d4:	20000050 	.word	0x20000050
 80007d8:	20000054 	.word	0x20000054

080007dc <get7SEG2Value>:
static int get7SEG2Value() {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	switch (mode) {
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <get7SEG2Value+0x48>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d816      	bhi.n	8000818 <get7SEG2Value+0x3c>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <get7SEG2Value+0x14>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000807 	.word	0x08000807
 80007f8:	0800080d 	.word	0x0800080d
 80007fc:	08000813 	.word	0x08000813
		case 1:
			return count2;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <get7SEG2Value+0x4c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	e00a      	b.n	800081c <get7SEG2Value+0x40>
		case 2:
			return red_draft;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <get7SEG2Value+0x50>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	e007      	b.n	800081c <get7SEG2Value+0x40>
		case 3:
			return yellow_draft;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <get7SEG2Value+0x54>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e004      	b.n	800081c <get7SEG2Value+0x40>
		case 4:
			return green_draft;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <get7SEG2Value+0x58>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	e001      	b.n	800081c <get7SEG2Value+0x40>
		default:
			break;
 8000818:	bf00      	nop
	}
	return 0;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	2000000c 	.word	0x2000000c
 8000828:	20000004 	.word	0x20000004
 800082c:	2000004c 	.word	0x2000004c
 8000830:	20000050 	.word	0x20000050
 8000834:	20000054 	.word	0x20000054

08000838 <LedDispMode>:


void LedDispMode() {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	switch (mode) {
 800083c:	4b54      	ldr	r3, [pc, #336]	; (8000990 <LedDispMode+0x158>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	2b03      	cmp	r3, #3
 8000844:	f200 8099 	bhi.w	800097a <LedDispMode+0x142>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <LedDispMode+0x18>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	08000861 	.word	0x08000861
 8000854:	08000879 	.word	0x08000879
 8000858:	080008cf 	.word	0x080008cf
 800085c:	08000925 	.word	0x08000925
		case 1:
			if (get_timer0_flag()) {
 8000860:	f000 fede 	bl	8001620 <get_timer0_flag>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8089 	beq.w	800097e <LedDispMode+0x146>
				setTimer0(250);
 800086c:	20fa      	movs	r0, #250	; 0xfa
 800086e:	f000 fe31 	bl	80014d4 <setTimer0>
				NormalMode();
 8000872:	f7ff fe1b 	bl	80004ac <NormalMode>
			}
			break;
 8000876:	e082      	b.n	800097e <LedDispMode+0x146>
		case 2:
			if (get_timer0_flag()) {
 8000878:	f000 fed2 	bl	8001620 <get_timer0_flag>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d07f      	beq.n	8000982 <LedDispMode+0x14a>
				setTimer0(200);
 8000882:	20c8      	movs	r0, #200	; 0xc8
 8000884:	f000 fe26 	bl	80014d4 <setTimer0>
				HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	4841      	ldr	r0, [pc, #260]	; (8000994 <LedDispMode+0x15c>)
 800088e:	f001 fa38 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000896:	483f      	ldr	r0, [pc, #252]	; (8000994 <LedDispMode+0x15c>)
 8000898:	f001 fa33 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a2:	483c      	ldr	r0, [pc, #240]	; (8000994 <LedDispMode+0x15c>)
 80008a4:	f001 fa15 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ae:	4839      	ldr	r0, [pc, #228]	; (8000994 <LedDispMode+0x15c>)
 80008b0:	f001 fa0f 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <LedDispMode+0x15c>)
 80008bc:	f001 fa09 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <LedDispMode+0x15c>)
 80008c8:	f001 fa03 	bl	8001cd2 <HAL_GPIO_WritePin>
			}
			break;
 80008cc:	e059      	b.n	8000982 <LedDispMode+0x14a>
		case 3:
			if (get_timer0_flag()) {
 80008ce:	f000 fea7 	bl	8001620 <get_timer0_flag>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d056      	beq.n	8000986 <LedDispMode+0x14e>
				setTimer0(200);
 80008d8:	20c8      	movs	r0, #200	; 0xc8
 80008da:	f000 fdfb 	bl	80014d4 <setTimer0>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 80008de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e2:	482c      	ldr	r0, [pc, #176]	; (8000994 <LedDispMode+0x15c>)
 80008e4:	f001 fa0d 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 80008e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <LedDispMode+0x15c>)
 80008ee:	f001 fa08 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	4826      	ldr	r0, [pc, #152]	; (8000994 <LedDispMode+0x15c>)
 80008fa:	f001 f9ea 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	4823      	ldr	r0, [pc, #140]	; (8000994 <LedDispMode+0x15c>)
 8000906:	f001 f9e4 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <LedDispMode+0x15c>)
 8000912:	f001 f9de 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <LedDispMode+0x15c>)
 800091e:	f001 f9d8 	bl	8001cd2 <HAL_GPIO_WritePin>
			}
			break;
 8000922:	e030      	b.n	8000986 <LedDispMode+0x14e>
		case 4:
			if (get_timer0_flag()) {
 8000924:	f000 fe7c 	bl	8001620 <get_timer0_flag>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d02d      	beq.n	800098a <LedDispMode+0x152>
				setTimer0(200);
 800092e:	20c8      	movs	r0, #200	; 0xc8
 8000930:	f000 fdd0 	bl	80014d4 <setTimer0>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000938:	4816      	ldr	r0, [pc, #88]	; (8000994 <LedDispMode+0x15c>)
 800093a:	f001 f9e2 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4814      	ldr	r0, [pc, #80]	; (8000994 <LedDispMode+0x15c>)
 8000944:	f001 f9dd 	bl	8001d02 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094e:	4811      	ldr	r0, [pc, #68]	; (8000994 <LedDispMode+0x15c>)
 8000950:	f001 f9bf 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <LedDispMode+0x15c>)
 800095c:	f001 f9b9 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <LedDispMode+0x15c>)
 8000968:	f001 f9b3 	bl	8001cd2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <LedDispMode+0x15c>)
 8000974:	f001 f9ad 	bl	8001cd2 <HAL_GPIO_WritePin>
			}
			break;
 8000978:	e007      	b.n	800098a <LedDispMode+0x152>
		default:
			break;
 800097a:	bf00      	nop
 800097c:	e006      	b.n	800098c <LedDispMode+0x154>
			break;
 800097e:	bf00      	nop
 8000980:	e004      	b.n	800098c <LedDispMode+0x154>
			break;
 8000982:	bf00      	nop
 8000984:	e002      	b.n	800098c <LedDispMode+0x154>
			break;
 8000986:	bf00      	nop
 8000988:	e000      	b.n	800098c <LedDispMode+0x154>
			break;
 800098a:	bf00      	nop
	}
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000000c 	.word	0x2000000c
 8000994:	40010c00 	.word	0x40010c00

08000998 <LEDScanning>:


void LEDScanning() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	static int scan_index = 0;
	switch (scan_index) {
 800099c:	4b7e      	ldr	r3, [pc, #504]	; (8000b98 <LEDScanning+0x200>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	f200 80f6 	bhi.w	8000b92 <LEDScanning+0x1fa>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <LEDScanning+0x14>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009c1 	.word	0x080009c1
 80009b0:	08000a1d 	.word	0x08000a1d
 80009b4:	08000a83 	.word	0x08000a83
 80009b8:	08000adf 	.word	0x08000adf
 80009bc:	08000b45 	.word	0x08000b45
		case 0:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	4875      	ldr	r0, [pc, #468]	; (8000b9c <LEDScanning+0x204>)
 80009c8:	f001 f983 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	4872      	ldr	r0, [pc, #456]	; (8000b9c <LEDScanning+0x204>)
 80009d4:	f001 f97d 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	486f      	ldr	r0, [pc, #444]	; (8000b9c <LEDScanning+0x204>)
 80009e0:	f001 f977 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ea:	486c      	ldr	r0, [pc, #432]	; (8000b9c <LEDScanning+0x204>)
 80009ec:	f001 f971 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f6:	4869      	ldr	r0, [pc, #420]	; (8000b9c <LEDScanning+0x204>)
 80009f8:	f001 f96b 	bl	8001cd2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() / 10);
 80009fc:	f7ff fec0 	bl	8000780 <get7SEG1Value>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <LEDScanning+0x208>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	1092      	asrs	r2, r2, #2
 8000a0a:	17db      	asrs	r3, r3, #31
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fb9c 	bl	800014c <display7SEG>
			scan_index = 1;
 8000a14:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <LEDScanning+0x200>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
			break;
 8000a1a:	e0bb      	b.n	8000b94 <LEDScanning+0x1fc>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a22:	485e      	ldr	r0, [pc, #376]	; (8000b9c <LEDScanning+0x204>)
 8000a24:	f001 f955 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2e:	485b      	ldr	r0, [pc, #364]	; (8000b9c <LEDScanning+0x204>)
 8000a30:	f001 f94f 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3a:	4858      	ldr	r0, [pc, #352]	; (8000b9c <LEDScanning+0x204>)
 8000a3c:	f001 f949 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a46:	4855      	ldr	r0, [pc, #340]	; (8000b9c <LEDScanning+0x204>)
 8000a48:	f001 f943 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	4852      	ldr	r0, [pc, #328]	; (8000b9c <LEDScanning+0x204>)
 8000a54:	f001 f93d 	bl	8001cd2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() % 10);
 8000a58:	f7ff fe92 	bl	8000780 <get7SEG1Value>
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <LEDScanning+0x208>)
 8000a60:	fb83 2301 	smull	r2, r3, r3, r1
 8000a64:	109a      	asrs	r2, r3, #2
 8000a66:	17cb      	asrs	r3, r1, #31
 8000a68:	1ad2      	subs	r2, r2, r3
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	1aca      	subs	r2, r1, r3
 8000a74:	4610      	mov	r0, r2
 8000a76:	f7ff fb69 	bl	800014c <display7SEG>
			scan_index = 2;
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <LEDScanning+0x200>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	601a      	str	r2, [r3, #0]
			break;
 8000a80:	e088      	b.n	8000b94 <LEDScanning+0x1fc>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4844      	ldr	r0, [pc, #272]	; (8000b9c <LEDScanning+0x204>)
 8000a8a:	f001 f922 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a94:	4841      	ldr	r0, [pc, #260]	; (8000b9c <LEDScanning+0x204>)
 8000a96:	f001 f91c 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	483e      	ldr	r0, [pc, #248]	; (8000b9c <LEDScanning+0x204>)
 8000aa2:	f001 f916 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aac:	483b      	ldr	r0, [pc, #236]	; (8000b9c <LEDScanning+0x204>)
 8000aae:	f001 f910 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4838      	ldr	r0, [pc, #224]	; (8000b9c <LEDScanning+0x204>)
 8000aba:	f001 f90a 	bl	8001cd2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() / 10);
 8000abe:	f7ff fe8d 	bl	80007dc <get7SEG2Value>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <LEDScanning+0x208>)
 8000ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aca:	1092      	asrs	r2, r2, #2
 8000acc:	17db      	asrs	r3, r3, #31
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fb3b 	bl	800014c <display7SEG>
			scan_index = 3;
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <LEDScanning+0x200>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	601a      	str	r2, [r3, #0]
			break;
 8000adc:	e05a      	b.n	8000b94 <LEDScanning+0x1fc>
		case 3:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	482d      	ldr	r0, [pc, #180]	; (8000b9c <LEDScanning+0x204>)
 8000ae6:	f001 f8f4 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af0:	482a      	ldr	r0, [pc, #168]	; (8000b9c <LEDScanning+0x204>)
 8000af2:	f001 f8ee 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <LEDScanning+0x204>)
 8000afe:	f001 f8e8 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b08:	4824      	ldr	r0, [pc, #144]	; (8000b9c <LEDScanning+0x204>)
 8000b0a:	f001 f8e2 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <LEDScanning+0x204>)
 8000b16:	f001 f8dc 	bl	8001cd2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() % 10);
 8000b1a:	f7ff fe5f 	bl	80007dc <get7SEG2Value>
 8000b1e:	4601      	mov	r1, r0
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <LEDScanning+0x208>)
 8000b22:	fb83 2301 	smull	r2, r3, r3, r1
 8000b26:	109a      	asrs	r2, r3, #2
 8000b28:	17cb      	asrs	r3, r1, #31
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1aca      	subs	r2, r1, r3
 8000b36:	4610      	mov	r0, r2
 8000b38:	f7ff fb08 	bl	800014c <display7SEG>
			scan_index = 4;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <LEDScanning+0x200>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	601a      	str	r2, [r3, #0]
			break;
 8000b42:	e027      	b.n	8000b94 <LEDScanning+0x1fc>
		case 4:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <LEDScanning+0x204>)
 8000b4c:	f001 f8c1 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <LEDScanning+0x204>)
 8000b58:	f001 f8bb 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <LEDScanning+0x204>)
 8000b64:	f001 f8b5 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <LEDScanning+0x204>)
 8000b70:	f001 f8af 	bl	8001cd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <LEDScanning+0x204>)
 8000b7c:	f001 f8a9 	bl	8001cd2 <HAL_GPIO_WritePin>
			display7SEG(mode);
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <LEDScanning+0x20c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fae1 	bl	800014c <display7SEG>
			scan_index = 0;
 8000b8a:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <LEDScanning+0x200>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
			break;
 8000b90:	e000      	b.n	8000b94 <LEDScanning+0x1fc>
		default:
			break;
 8000b92:	bf00      	nop
	}
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000003c 	.word	0x2000003c
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	66666667 	.word	0x66666667
 8000ba4:	2000000c 	.word	0x2000000c

08000ba8 <LedTimeDurationInit>:

int mode = 1;
int red_value, yellow_value, green_value;
int red_draft, yellow_draft, green_draft;

void LedTimeDurationInit() {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	red_value = RED_INIT;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LedTimeDurationInit+0x38>)
 8000bae:	221e      	movs	r2, #30
 8000bb0:	601a      	str	r2, [r3, #0]
	yellow_value = YELLOW_INIT;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LedTimeDurationInit+0x3c>)
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	601a      	str	r2, [r3, #0]
	green_value = GREEN_INIT;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LedTimeDurationInit+0x40>)
 8000bba:	2219      	movs	r2, #25
 8000bbc:	601a      	str	r2, [r3, #0]
	red_draft = red_value;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <LedTimeDurationInit+0x38>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LedTimeDurationInit+0x44>)
 8000bc4:	6013      	str	r3, [r2, #0]
	yellow_draft = yellow_value;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <LedTimeDurationInit+0x3c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <LedTimeDurationInit+0x48>)
 8000bcc:	6013      	str	r3, [r2, #0]
	green_draft = green_value;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <LedTimeDurationInit+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <LedTimeDurationInit+0x4c>)
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000040 	.word	0x20000040
 8000be4:	20000044 	.word	0x20000044
 8000be8:	20000048 	.word	0x20000048
 8000bec:	2000004c 	.word	0x2000004c
 8000bf0:	20000050 	.word	0x20000050
 8000bf4:	20000054 	.word	0x20000054

08000bf8 <UpdateMode>:
#include "input_processing.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void UpdateMode() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	switch (buttonState[0]) {
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <UpdateMode+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <UpdateMode+0x12>
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d018      	beq.n	8000c3a <UpdateMode+0x42>
			if (!is_button_pressed(0)) {
				buttonState[0] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000c08:	e024      	b.n	8000c54 <UpdateMode+0x5c>
			if (is_button_pressed(0)) {
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 fa46 	bl	800109c <is_button_pressed>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d01b      	beq.n	8000c4e <UpdateMode+0x56>
				buttonState[0] = BUTTON_PRESSED;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <UpdateMode+0x60>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
				mode++;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <UpdateMode+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <UpdateMode+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]
				if (mode > 4) {
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <UpdateMode+0x64>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	dd0f      	ble.n	8000c4e <UpdateMode+0x56>
					mode = 1;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <UpdateMode+0x64>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000c34:	f7ff fc1a 	bl	800046c <resetCountValue>
			break;
 8000c38:	e009      	b.n	8000c4e <UpdateMode+0x56>
			if (!is_button_pressed(0)) {
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 fa2e 	bl	800109c <is_button_pressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <UpdateMode+0x5a>
				buttonState[0] = BUTTON_RELEASED;
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <UpdateMode+0x60>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			break;
 8000c4c:	e001      	b.n	8000c52 <UpdateMode+0x5a>
			break;
 8000c4e:	bf00      	nop
 8000c50:	e000      	b.n	8000c54 <UpdateMode+0x5c>
			break;
 8000c52:	bf00      	nop
	}
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000058 	.word	0x20000058
 8000c5c:	2000000c 	.word	0x2000000c

08000c60 <increaseDraftValue>:

static void increaseDraftValue() {
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	switch (mode) {
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <increaseDraftValue+0x80>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d020      	beq.n	8000cae <increaseDraftValue+0x4e>
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	dc2b      	bgt.n	8000cc8 <increaseDraftValue+0x68>
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d002      	beq.n	8000c7a <increaseDraftValue+0x1a>
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d00d      	beq.n	8000c94 <increaseDraftValue+0x34>
		case 4:
			green_draft++;
			if (green_draft > 99) green_draft = 0;
			break;
		default:
			break;
 8000c78:	e026      	b.n	8000cc8 <increaseDraftValue+0x68>
			red_draft++;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <increaseDraftValue+0x84>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <increaseDraftValue+0x84>)
 8000c82:	6013      	str	r3, [r2, #0]
			if (red_draft > 99) red_draft = 0;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <increaseDraftValue+0x84>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b63      	cmp	r3, #99	; 0x63
 8000c8a:	dd1f      	ble.n	8000ccc <increaseDraftValue+0x6c>
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <increaseDraftValue+0x84>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
			break;
 8000c92:	e01b      	b.n	8000ccc <increaseDraftValue+0x6c>
			yellow_draft++;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <increaseDraftValue+0x88>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <increaseDraftValue+0x88>)
 8000c9c:	6013      	str	r3, [r2, #0]
			if (yellow_draft > 99) yellow_draft = 0;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <increaseDraftValue+0x88>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b63      	cmp	r3, #99	; 0x63
 8000ca4:	dd14      	ble.n	8000cd0 <increaseDraftValue+0x70>
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <increaseDraftValue+0x88>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
			break;
 8000cac:	e010      	b.n	8000cd0 <increaseDraftValue+0x70>
			green_draft++;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <increaseDraftValue+0x8c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <increaseDraftValue+0x8c>)
 8000cb6:	6013      	str	r3, [r2, #0]
			if (green_draft > 99) green_draft = 0;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <increaseDraftValue+0x8c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b63      	cmp	r3, #99	; 0x63
 8000cbe:	dd09      	ble.n	8000cd4 <increaseDraftValue+0x74>
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <increaseDraftValue+0x8c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
			break;
 8000cc6:	e005      	b.n	8000cd4 <increaseDraftValue+0x74>
			break;
 8000cc8:	bf00      	nop
 8000cca:	e004      	b.n	8000cd6 <increaseDraftValue+0x76>
			break;
 8000ccc:	bf00      	nop
 8000cce:	e002      	b.n	8000cd6 <increaseDraftValue+0x76>
			break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <increaseDraftValue+0x76>
			break;
 8000cd4:	bf00      	nop
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	2000004c 	.word	0x2000004c
 8000ce8:	20000050 	.word	0x20000050
 8000cec:	20000054 	.word	0x20000054

08000cf0 <setDurationValue>:

static void setDurationValue() {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
	int diff = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
	switch (mode) {
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <setDurationValue+0xb8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d034      	beq.n	8000d6c <setDurationValue+0x7c>
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	dc49      	bgt.n	8000d9a <setDurationValue+0xaa>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d002      	beq.n	8000d10 <setDurationValue+0x20>
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <setDurationValue+0x4e>
			green_value = green_draft;
			green_value += diff;
			green_draft += diff;
			break;
		default:
			break;
 8000d0e:	e044      	b.n	8000d9a <setDurationValue+0xaa>
			diff = red_draft - red_value;
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <setDurationValue+0xbc>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <setDurationValue+0xc0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	607b      	str	r3, [r7, #4]
			red_value = red_draft;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <setDurationValue+0xbc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <setDurationValue+0xc0>)
 8000d22:	6013      	str	r3, [r2, #0]
			green_value += diff;
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <setDurationValue+0xc4>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <setDurationValue+0xc4>)
 8000d2e:	6013      	str	r3, [r2, #0]
			green_draft += diff;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <setDurationValue+0xc8>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <setDurationValue+0xc8>)
 8000d3a:	6013      	str	r3, [r2, #0]
			break;
 8000d3c:	e02e      	b.n	8000d9c <setDurationValue+0xac>
			diff = yellow_draft - yellow_value;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <setDurationValue+0xcc>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <setDurationValue+0xd0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	607b      	str	r3, [r7, #4]
			yellow_value = yellow_draft;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <setDurationValue+0xcc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <setDurationValue+0xd0>)
 8000d50:	6013      	str	r3, [r2, #0]
			red_value += diff;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <setDurationValue+0xc0>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <setDurationValue+0xc0>)
 8000d5c:	6013      	str	r3, [r2, #0]
			red_draft += diff;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <setDurationValue+0xbc>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <setDurationValue+0xbc>)
 8000d68:	6013      	str	r3, [r2, #0]
			break;
 8000d6a:	e017      	b.n	8000d9c <setDurationValue+0xac>
			diff = green_draft - green_value;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <setDurationValue+0xc8>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <setDurationValue+0xc4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	607b      	str	r3, [r7, #4]
			green_value = green_draft;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <setDurationValue+0xc8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <setDurationValue+0xc4>)
 8000d7e:	6013      	str	r3, [r2, #0]
			green_value += diff;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <setDurationValue+0xc4>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <setDurationValue+0xc4>)
 8000d8a:	6013      	str	r3, [r2, #0]
			green_draft += diff;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <setDurationValue+0xc8>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <setDurationValue+0xc8>)
 8000d96:	6013      	str	r3, [r2, #0]
			break;
 8000d98:	e000      	b.n	8000d9c <setDurationValue+0xac>
			break;
 8000d9a:	bf00      	nop
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	2000004c 	.word	0x2000004c
 8000db0:	20000040 	.word	0x20000040
 8000db4:	20000048 	.word	0x20000048
 8000db8:	20000054 	.word	0x20000054
 8000dbc:	20000050 	.word	0x20000050
 8000dc0:	20000044 	.word	0x20000044

08000dc4 <UpdateDurationValue>:

void UpdateDurationValue() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	switch (buttonState[1]) {
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d027      	beq.n	8000e20 <UpdateDurationValue+0x5c>
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	dc3a      	bgt.n	8000e4a <UpdateDurationValue+0x86>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <UpdateDurationValue+0x1a>
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d00c      	beq.n	8000df6 <UpdateDurationValue+0x32>
				reset_flagForButtonHold(1);
				increaseDraftValue();
			}
			break;
		default:
			break;
 8000ddc:	e035      	b.n	8000e4a <UpdateDurationValue+0x86>
			if (is_button_pressed(1)) {
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 f95c 	bl	800109c <is_button_pressed>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d031      	beq.n	8000e4e <UpdateDurationValue+0x8a>
				buttonState[1] = BUTTON_PRESSED;
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 8000df0:	f7ff ff36 	bl	8000c60 <increaseDraftValue>
			break;
 8000df4:	e02b      	b.n	8000e4e <UpdateDurationValue+0x8a>
			if (!is_button_pressed(1)) {
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 f950 	bl	800109c <is_button_pressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <UpdateDurationValue+0x44>
				buttonState[1] = BUTTON_RELEASED;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	705a      	strb	r2, [r3, #1]
			if (is_button_pressed_1s(1)) {
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f961 	bl	80010d0 <is_button_pressed_1s>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d01e      	beq.n	8000e52 <UpdateDurationValue+0x8e>
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 8000e1a:	f7ff ff21 	bl	8000c60 <increaseDraftValue>
			break;
 8000e1e:	e018      	b.n	8000e52 <UpdateDurationValue+0x8e>
			if (!is_button_pressed(1)) {
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f93b 	bl	800109c <is_button_pressed>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <UpdateDurationValue+0x6e>
				buttonState[1] = BUTTON_RELEASED;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	705a      	strb	r2, [r3, #1]
			if (is_button_held(1)) {
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 f966 	bl	8001104 <is_button_held>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <UpdateDurationValue+0x92>
				reset_flagForButtonHold(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 f97a 	bl	8001138 <reset_flagForButtonHold>
				increaseDraftValue();
 8000e44:	f7ff ff0c 	bl	8000c60 <increaseDraftValue>
			break;
 8000e48:	e005      	b.n	8000e56 <UpdateDurationValue+0x92>
			break;
 8000e4a:	bf00      	nop
 8000e4c:	e004      	b.n	8000e58 <UpdateDurationValue+0x94>
			break;
 8000e4e:	bf00      	nop
 8000e50:	e002      	b.n	8000e58 <UpdateDurationValue+0x94>
			break;
 8000e52:	bf00      	nop
 8000e54:	e000      	b.n	8000e58 <UpdateDurationValue+0x94>
			break;
 8000e56:	bf00      	nop
	}

	switch (buttonState[2]) {
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <UpdateDurationValue+0xa2>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d00c      	beq.n	8000e7e <UpdateDurationValue+0xba>
			if (!is_button_pressed(2)) {
				buttonState[2] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000e64:	e018      	b.n	8000e98 <UpdateDurationValue+0xd4>
			if (is_button_pressed(2)) {
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f918 	bl	800109c <is_button_pressed>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00f      	beq.n	8000e92 <UpdateDurationValue+0xce>
				buttonState[2] = BUTTON_PRESSED;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	709a      	strb	r2, [r3, #2]
				setDurationValue();
 8000e78:	f7ff ff3a 	bl	8000cf0 <setDurationValue>
			break;
 8000e7c:	e009      	b.n	8000e92 <UpdateDurationValue+0xce>
			if (!is_button_pressed(2)) {
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 f90c 	bl	800109c <is_button_pressed>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d105      	bne.n	8000e96 <UpdateDurationValue+0xd2>
				buttonState[2] = BUTTON_RELEASED;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <UpdateDurationValue+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	709a      	strb	r2, [r3, #2]
			break;
 8000e90:	e001      	b.n	8000e96 <UpdateDurationValue+0xd2>
			break;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <UpdateDurationValue+0xd4>
			break;
 8000e96:	bf00      	nop
	}
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000058 	.word	0x20000058

08000ea0 <init_buffer>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static uint8_t flagForButtonHold[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonHold[NO_OF_BUTTONS];

void init_buffer() {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e02a      	b.n	8000f02 <init_buffer+0x62>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <init_buffer+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = BUTTON_IS_RELEASED;
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <init_buffer+0x78>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = BUTTON_IS_RELEASED;
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <init_buffer+0x7c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer3[i] = BUTTON_IS_RELEASED;
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <init_buffer+0x80>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <init_buffer+0x84>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		flagForButtonHold[i] = 0;
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <init_buffer+0x88>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <init_buffer+0x8c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <init_buffer+0x90>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	ddd1      	ble.n	8000eac <init_buffer+0xc>
	}
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000005c 	.word	0x2000005c
 8000f18:	20000060 	.word	0x20000060
 8000f1c:	20000064 	.word	0x20000064
 8000f20:	20000068 	.word	0x20000068
 8000f24:	2000006c 	.word	0x2000006c
 8000f28:	20000070 	.word	0x20000070
 8000f2c:	20000074 	.word	0x20000074
 8000f30:	2000007c 	.word	0x2000007c

08000f34 <button_reading>:

void button_reading(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	e092      	b.n	8001066 <button_reading+0x132>
		debounceButtonBufer3[i] = debounceButtonBufer2[i];
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <button_reading+0x144>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	7819      	ldrb	r1, [r3, #0]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	; (800107c <button_reading+0x148>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	460a      	mov	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = debounceButtonBufer1[i];
 8000f52:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <button_reading+0x14c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	7819      	ldrb	r1, [r3, #0]
 8000f5a:	4a47      	ldr	r2, [pc, #284]	; (8001078 <button_reading+0x144>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	460a      	mov	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, (1U << i));
 8000f64:	2201      	movs	r2, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4844      	ldr	r0, [pc, #272]	; (8001084 <button_reading+0x150>)
 8000f72:	f000 fe97 	bl	8001ca4 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4a41      	ldr	r2, [pc, #260]	; (8001080 <button_reading+0x14c>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBufer1[i] == debounceButtonBufer2[i] && debounceButtonBufer3[i] == debounceButtonBufer2[i])
 8000f84:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <button_reading+0x14c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	493a      	ldr	r1, [pc, #232]	; (8001078 <button_reading+0x144>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	440b      	add	r3, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d112      	bne.n	8000fbe <button_reading+0x8a>
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <button_reading+0x148>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <button_reading+0x144>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	440b      	add	r3, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d108      	bne.n	8000fbe <button_reading+0x8a>
			buttonBuffer[i] = debounceButtonBufer1[i];
 8000fac:	4a34      	ldr	r2, [pc, #208]	; (8001080 <button_reading+0x14c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	7819      	ldrb	r1, [r3, #0]
 8000fb4:	4a34      	ldr	r2, [pc, #208]	; (8001088 <button_reading+0x154>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	460a      	mov	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <button_reading+0x154>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d136      	bne.n	8001038 <button_reading+0x104>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000fca:	4a30      	ldr	r2, [pc, #192]	; (800108c <button_reading+0x158>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	2bc7      	cmp	r3, #199	; 0xc7
 8000fd4:	d80a      	bhi.n	8000fec <button_reading+0xb8>
				counterForButtonPress1s[i]++;
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <button_reading+0x158>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <button_reading+0x158>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fea:	e039      	b.n	8001060 <button_reading+0x12c>
			}
			else {
				flagForButtonPress1s[i] = 1;
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <button_reading+0x15c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
				//TO DO
				if (counterForButtonHold[i] < DURATION_FOR_HOLD) {
 8000ff6:	4a27      	ldr	r2, [pc, #156]	; (8001094 <button_reading+0x160>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffe:	2b31      	cmp	r3, #49	; 0x31
 8001000:	d82e      	bhi.n	8001060 <button_reading+0x12c>
					counterForButtonHold[i]++;
 8001002:	4a24      	ldr	r2, [pc, #144]	; (8001094 <button_reading+0x160>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	3301      	adds	r3, #1
 800100c:	b299      	uxth	r1, r3
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <button_reading+0x160>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (counterForButtonHold[i] >= DURATION_FOR_HOLD) {
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <button_reading+0x160>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101e:	2b31      	cmp	r3, #49	; 0x31
 8001020:	d91e      	bls.n	8001060 <button_reading+0x12c>
						counterForButtonHold[i] = 0;
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <button_reading+0x160>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2100      	movs	r1, #0
 8001028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonHold[i] = 1;
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <button_reading+0x164>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e013      	b.n	8001060 <button_reading+0x12c>
					}
				}
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <button_reading+0x158>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2100      	movs	r1, #0
 800103e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <button_reading+0x15c>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			counterForButtonHold[i] = 0;
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <button_reading+0x160>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2100      	movs	r1, #0
 8001052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonHold[i] = 0;
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <button_reading+0x164>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b02      	cmp	r3, #2
 800106a:	f77f af69 	ble.w	8000f40 <button_reading+0xc>
		}
	}
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000064 	.word	0x20000064
 800107c:	20000068 	.word	0x20000068
 8001080:	20000060 	.word	0x20000060
 8001084:	40010c00 	.word	0x40010c00
 8001088:	2000005c 	.word	0x2000005c
 800108c:	20000074 	.word	0x20000074
 8001090:	2000006c 	.word	0x2000006c
 8001094:	2000007c 	.word	0x2000007c
 8001098:	20000070 	.word	0x20000070

0800109c <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <is_button_pressed+0x14>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e007      	b.n	80010c0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <is_button_pressed+0x30>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000005c 	.word	0x2000005c

080010d0 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <is_button_pressed_1s+0x14>
 80010e0:	2300      	movs	r3, #0
 80010e2:	e007      	b.n	80010f4 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <is_button_pressed_1s+0x30>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	bf0c      	ite	eq
 80010ee:	2301      	moveq	r3, #1
 80010f0:	2300      	movne	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000006c 	.word	0x2000006c

08001104 <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <is_button_held+0x14>
 8001114:	2300      	movs	r3, #0
 8001116:	e007      	b.n	8001128 <is_button_held+0x24>
	return (flagForButtonHold[index] == 1);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <is_button_held+0x30>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	2b01      	cmp	r3, #1
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000070 	.word	0x20000070

08001138 <reset_flagForButtonHold>:

void reset_flagForButtonHold(unsigned char index) {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	flagForButtonHold[index] = 0;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <reset_flagForButtonHold+0x1c>)
 8001146:	2100      	movs	r1, #0
 8001148:	54d1      	strb	r1, [r2, r3]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000070 	.word	0x20000070

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fab6 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f83a 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f000 f8c0 	bl	80012e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001168:	f000 f872 	bl	8001250 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <main+0x78>)
 800116e:	f001 fa0f 	bl	8002590 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_buffer();
 8001172:	f7ff fe95 	bl	8000ea0 <init_buffer>
  LedTimeDurationInit();
 8001176:	f7ff fd17 	bl	8000ba8 <LedTimeDurationInit>
  setTimer0(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f9aa 	bl	80014d4 <setTimer0>
  setTimer1(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 f9bb 	bl	80014fc <setTimer1>
  setTimer2(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 f9cc 	bl	8001524 <setTimer2>
  setTimer3(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 f9dd 	bl	800154c <setTimer3>
  while (1)
  {
	  UpdateMode();
 8001192:	f7ff fd31 	bl	8000bf8 <UpdateMode>
	  if (get_timer2_flag()) {
 8001196:	f000 fa57 	bl	8001648 <get_timer2_flag>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <main+0x52>
		  LEDScanning();
 80011a0:	f7ff fbfa 	bl	8000998 <LEDScanning>
		  setTimer2(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 f9bd 	bl	8001524 <setTimer2>
	  }

	  LedDispMode();
 80011aa:	f7ff fb45 	bl	8000838 <LedDispMode>
	  UpdateDurationValue();
 80011ae:	f7ff fe09 	bl	8000dc4 <UpdateDurationValue>

	  if (get_timer1_flag()) {
 80011b2:	f000 fa3f 	bl	8001634 <get_timer1_flag>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ea      	beq.n	8001192 <main+0x3a>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <main+0x7c>)
 80011c0:	f000 fd9f 	bl	8001d02 <HAL_GPIO_TogglePin>
		  setTimer1(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f000 f998 	bl	80014fc <setTimer1>
	  UpdateMode();
 80011cc:	e7e1      	b.n	8001192 <main+0x3a>
 80011ce:	bf00      	nop
 80011d0:	20000084 	.word	0x20000084
 80011d4:	40010800 	.word	0x40010800

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2228      	movs	r2, #40	; 0x28
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fd8e 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fe:	2301      	movs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001202:	2310      	movs	r3, #16
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fd90 	bl	8001d34 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800121a:	f000 f8c7 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fffe 	bl	8002238 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001242:	f000 f8b3 	bl	80013ac <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3740      	adds	r7, #64	; 0x40
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_TIM2_Init+0x94>)
 800126e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001276:	f240 321f 	movw	r2, #799	; 0x31f
 800127a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_TIM2_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001284:	2209      	movs	r2, #9
 8001286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_TIM2_Init+0x94>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001294:	4813      	ldr	r0, [pc, #76]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001296:	f001 f92b 	bl	80024f0 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a0:	f000 f884 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <MX_TIM2_Init+0x94>)
 80012b2:	f001 fac1 	bl	8002838 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f876 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM2_Init+0x94>)
 80012ce:	f001 fc8d 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 f868 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000084 	.word	0x20000084

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_GPIO_Init+0xb8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <MX_GPIO_Init+0xb8>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_GPIO_Init+0xb8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_GPIO_Init+0xb8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_GPIO_Init+0xb8>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_GPIO_Init+0xb8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800132c:	2200      	movs	r2, #0
 800132e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001332:	481c      	ldr	r0, [pc, #112]	; (80013a4 <MX_GPIO_Init+0xbc>)
 8001334:	f000 fccd 	bl	8001cd2 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001340:	f000 fcc7 	bl	8001cd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001344:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001348:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4619      	mov	r1, r3
 800135c:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_GPIO_Init+0xbc>)
 800135e:	f000 fb25 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001362:	2307      	movs	r3, #7
 8001364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001376:	f000 fb19 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : G1_Pin R2_Pin Y2_Pin G2_Pin
                           R1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 800137a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800137e:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001394:	f000 fb0a 	bl	80019ac <HAL_GPIO_Init>

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d113      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201c      	movs	r0, #28
 800144c:	f000 fa77 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001450:	201c      	movs	r0, #28
 8001452:	f000 fa90 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014aa:	f000 f955 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f001 f8b5 	bl	8002628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000084 	.word	0x20000084

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer0(int duration) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 80014dc:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <setTimer0+0x20>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <setTimer0+0x24>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200000cc 	.word	0x200000cc
 80014f8:	200000d0 	.word	0x200000d0

080014fc <setTimer1>:
void setTimer1(int duration) {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <setTimer1+0x20>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <setTimer1+0x24>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200000d4 	.word	0x200000d4
 8001520:	200000d8 	.word	0x200000d8

08001524 <setTimer2>:
void setTimer2(int duration) {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <setTimer2+0x20>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <setTimer2+0x24>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200000dc 	.word	0x200000dc
 8001548:	200000e0 	.word	0x200000e0

0800154c <setTimer3>:
void setTimer3(int duration) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001554:	4a05      	ldr	r2, [pc, #20]	; (800156c <setTimer3+0x20>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <setTimer3+0x24>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200000e4 	.word	0x200000e4
 8001570:	200000e8 	.word	0x200000e8

08001574 <timer_run>:
void timer_run() {
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <timer_run+0x8c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd0b      	ble.n	8001598 <timer_run+0x24>
		timer0_counter--;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <timer_run+0x8c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <timer_run+0x8c>)
 8001588:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <timer_run+0x8c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <timer_run+0x24>
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <timer_run+0x90>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
	}

	if (timer1_counter > 0) {
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <timer_run+0x94>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0b      	ble.n	80015b8 <timer_run+0x44>
		timer1_counter--;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <timer_run+0x94>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <timer_run+0x94>)
 80015a8:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <timer_run+0x94>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <timer_run+0x44>
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <timer_run+0x98>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <timer_run+0x9c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dd0b      	ble.n	80015d8 <timer_run+0x64>
		timer2_counter--;
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <timer_run+0x9c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <timer_run+0x9c>)
 80015c8:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <timer_run+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <timer_run+0x64>
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <timer_run+0xa0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <timer_run+0xa4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dd0b      	ble.n	80015f8 <timer_run+0x84>
		timer3_counter--;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <timer_run+0xa4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <timer_run+0xa4>)
 80015e8:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <timer_run+0xa4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <timer_run+0x84>
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <timer_run+0xa8>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
	}
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	200000cc 	.word	0x200000cc
 8001604:	200000d0 	.word	0x200000d0
 8001608:	200000d4 	.word	0x200000d4
 800160c:	200000d8 	.word	0x200000d8
 8001610:	200000dc 	.word	0x200000dc
 8001614:	200000e0 	.word	0x200000e0
 8001618:	200000e4 	.word	0x200000e4
 800161c:	200000e8 	.word	0x200000e8

08001620 <get_timer0_flag>:

int get_timer0_flag() {
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	return timer0_flag;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <get_timer0_flag+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	200000d0 	.word	0x200000d0

08001634 <get_timer1_flag>:
int get_timer1_flag() {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	return timer1_flag;
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <get_timer1_flag+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	200000d8 	.word	0x200000d8

08001648 <get_timer2_flag>:
int get_timer2_flag() {
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return timer2_flag;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <get_timer2_flag+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	200000e0 	.word	0x200000e0

0800165c <HAL_TIM_PeriodElapsedCallback>:
int get_timer3_flag() {
	return timer3_flag;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	timer_run();
 8001664:	f7ff ff86 	bl	8001574 <timer_run>
	if (htim->Instance == TIM2) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d101      	bne.n	8001676 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001672:	f7ff fc5f 	bl	8000f34 <button_reading>
	}
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001680:	f7ff ff22 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001686:	490c      	ldr	r1, [pc, #48]	; (80016b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800169c:	4c09      	ldr	r4, [pc, #36]	; (80016c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f001 fb09 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ae:	f7ff fd53 	bl	8001158 <main>
  bx lr
 80016b2:	4770      	bx	lr
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80016bc:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 80016c0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016c4:	200000f0 	.word	0x200000f0

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x28>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x28>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 f923 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fe66 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40022000 	.word	0x40022000

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f93b 	bl	8001992 <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 f903 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000010 	.word	0x20000010
 8001750:	20000018 	.word	0x20000018
 8001754:	20000014 	.word	0x20000014

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x1c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_IncTick+0x20>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <HAL_IncTick+0x20>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000018 	.word	0x20000018
 8001778:	200000ec 	.word	0x200000ec

0800177c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <HAL_GetTick+0x10>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	200000ec 	.word	0x200000ec

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4906      	ldr	r1, [pc, #24]	; (8001828 <__NVIC_EnableIRQ+0x34>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff90 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff2d 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff42 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff90 	bl	8001880 <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5f 	bl	800182c <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff35 	bl	80017f4 <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e161      	b.n	8001c84 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c0:	2201      	movs	r2, #1
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8150 	bne.w	8001c7e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a97      	ldr	r2, [pc, #604]	; (8001c40 <HAL_GPIO_Init+0x294>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d05e      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
 80019e8:	4a95      	ldr	r2, [pc, #596]	; (8001c40 <HAL_GPIO_Init+0x294>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d875      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 80019ee:	4a95      	ldr	r2, [pc, #596]	; (8001c44 <HAL_GPIO_Init+0x298>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d058      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
 80019f4:	4a93      	ldr	r2, [pc, #588]	; (8001c44 <HAL_GPIO_Init+0x298>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d86f      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 80019fa:	4a93      	ldr	r2, [pc, #588]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d052      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
 8001a00:	4a91      	ldr	r2, [pc, #580]	; (8001c48 <HAL_GPIO_Init+0x29c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d869      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 8001a06:	4a91      	ldr	r2, [pc, #580]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d04c      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
 8001a0c:	4a8f      	ldr	r2, [pc, #572]	; (8001c4c <HAL_GPIO_Init+0x2a0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d863      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 8001a12:	4a8f      	ldr	r2, [pc, #572]	; (8001c50 <HAL_GPIO_Init+0x2a4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d046      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
 8001a18:	4a8d      	ldr	r2, [pc, #564]	; (8001c50 <HAL_GPIO_Init+0x2a4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d85d      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d82a      	bhi.n	8001a78 <HAL_GPIO_Init+0xcc>
 8001a22:	2b12      	cmp	r3, #18
 8001a24:	d859      	bhi.n	8001ada <HAL_GPIO_Init+0x12e>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_GPIO_Init+0x80>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001aa7 	.word	0x08001aa7
 8001a30:	08001a81 	.word	0x08001a81
 8001a34:	08001a93 	.word	0x08001a93
 8001a38:	08001ad5 	.word	0x08001ad5
 8001a3c:	08001adb 	.word	0x08001adb
 8001a40:	08001adb 	.word	0x08001adb
 8001a44:	08001adb 	.word	0x08001adb
 8001a48:	08001adb 	.word	0x08001adb
 8001a4c:	08001adb 	.word	0x08001adb
 8001a50:	08001adb 	.word	0x08001adb
 8001a54:	08001adb 	.word	0x08001adb
 8001a58:	08001adb 	.word	0x08001adb
 8001a5c:	08001adb 	.word	0x08001adb
 8001a60:	08001adb 	.word	0x08001adb
 8001a64:	08001adb 	.word	0x08001adb
 8001a68:	08001adb 	.word	0x08001adb
 8001a6c:	08001adb 	.word	0x08001adb
 8001a70:	08001a89 	.word	0x08001a89
 8001a74:	08001a9d 	.word	0x08001a9d
 8001a78:	4a76      	ldr	r2, [pc, #472]	; (8001c54 <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7e:	e02c      	b.n	8001ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e029      	b.n	8001adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e024      	b.n	8001adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	3308      	adds	r3, #8
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e01f      	b.n	8001adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e01a      	b.n	8001adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e013      	b.n	8001adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001abc:	2308      	movs	r3, #8
 8001abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	611a      	str	r2, [r3, #16]
          break;
 8001ac6:	e009      	b.n	8001adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	615a      	str	r2, [r3, #20]
          break;
 8001ad2:	e003      	b.n	8001adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x130>
          break;
 8001ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	d801      	bhi.n	8001ae6 <HAL_GPIO_Init+0x13a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	e001      	b.n	8001aea <HAL_GPIO_Init+0x13e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d802      	bhi.n	8001af8 <HAL_GPIO_Init+0x14c>
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x152>
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3b08      	subs	r3, #8
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	210f      	movs	r1, #15
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	6a39      	ldr	r1, [r7, #32]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a9 	beq.w	8001c7e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_GPIO_Init+0x2ac>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b44:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <HAL_GPIO_Init+0x2b4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1e0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1dc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	; (8001c68 <HAL_GPIO_Init+0x2bc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1d8>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e004      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_GPIO_Init+0x1e2>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b9e:	492f      	ldr	r1, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x2b0>)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	492b      	ldr	r1, [pc, #172]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4921      	ldr	r1, [pc, #132]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	491d      	ldr	r1, [pc, #116]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4917      	ldr	r1, [pc, #92]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4913      	ldr	r1, [pc, #76]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01f      	beq.n	8001c70 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	490d      	ldr	r1, [pc, #52]	; (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e01f      	b.n	8001c7e <HAL_GPIO_Init+0x2d2>
 8001c3e:	bf00      	nop
 8001c40:	10320000 	.word	0x10320000
 8001c44:	10310000 	.word	0x10310000
 8001c48:	10220000 	.word	0x10220000
 8001c4c:	10210000 	.word	0x10210000
 8001c50:	10120000 	.word	0x10120000
 8001c54:	10110000 	.word	0x10110000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40010800 	.word	0x40010800
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_GPIO_Init+0x2f4>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4909      	ldr	r1, [pc, #36]	; (8001ca0 <HAL_GPIO_Init+0x2f4>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	3301      	adds	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f47f ae96 	bne.w	80019c0 <HAL_GPIO_Init+0x14>
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	372c      	adds	r7, #44	; 0x2c
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e001      	b.n	8001cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce2:	787b      	ldrb	r3, [r7, #1]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	041a      	lsls	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d14:	887a      	ldrh	r2, [r7, #2]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	041a      	lsls	r2, r3, #16
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	400b      	ands	r3, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e272      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8087 	beq.w	8001e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d54:	4b92      	ldr	r3, [pc, #584]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d60:	4b8f      	ldr	r3, [pc, #572]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
 8001d6c:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d10b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x12c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d168      	bne.n	8001e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e24c      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x76>
 8001d9c:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a7f      	ldr	r2, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e02e      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0xbc>
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a71      	ldr	r2, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001df0:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fcb4 	bl	800177c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fcb0 	bl	800177c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e200      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe4>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fca0 	bl	800177c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fc9c 	bl	800177c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1ec      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x10c>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
 8001e86:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c0      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4939      	ldr	r1, [pc, #228]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fc55 	bl	800177c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fc51 	bl	800177c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a1      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4927      	ldr	r1, [pc, #156]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc34 	bl	800177c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc30 	bl	800177c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e180      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03a      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fc14 	bl	800177c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc10 	bl	800177c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e160      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 fa9c 	bl	80024b4 <RCC_Delay>
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff fbfa 	bl	800177c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fbf6 	bl	800177c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d908      	bls.n	8001fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e146      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	42420000 	.word	0x42420000
 8001fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b92      	ldr	r3, [pc, #584]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e9      	bne.n	8001f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a6 	beq.w	8002112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7e      	ldr	r2, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff fbb7 	bl	800177c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff fbb3 	bl	800177c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e103      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x312>
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	e02d      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x334>
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	e01c      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x356>
 8002070:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e00b      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fb67 	bl	800177c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff fb63 	bl	800177c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0b1      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ee      	beq.n	80020b2 <HAL_RCC_OscConfig+0x37e>
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fb51 	bl	800177c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff fb4d 	bl	800177c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e09b      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d061      	beq.n	80021ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d146      	bne.n	80021be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff fb21 	bl	800177c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff fb1d 	bl	800177c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e06d      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4921      	ldr	r1, [pc, #132]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a19      	ldr	r1, [r3, #32]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	430b      	orrs	r3, r1
 800218a:	491b      	ldr	r1, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff faf1 	bl	800177c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff faed 	bl	800177c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x46a>
 80021bc:	e035      	b.n	800222a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fada 	bl	800177c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff fad6 	bl	800177c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e026      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x498>
 80021ea:	e01e      	b.n	800222a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e019      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x500>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0d0      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4965      	ldr	r1, [pc, #404]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b8      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b59      	ldr	r3, [pc, #356]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ac:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b50      	ldr	r3, [pc, #320]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	494d      	ldr	r1, [pc, #308]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d040      	beq.n	8002358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e073      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06b      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4936      	ldr	r1, [pc, #216]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7ff fa28 	bl	800177c <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff fa24 	bl	800177c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e053      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d210      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e032      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4916      	ldr	r1, [pc, #88]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	490e      	ldr	r1, [pc, #56]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c6:	f000 f821 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490a      	ldr	r1, [pc, #40]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1cc>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_ClockConfig+0x1d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f986 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	08002d30 	.word	0x08002d30
 8002404:	20000010 	.word	0x20000010
 8002408:	20000014 	.word	0x20000014

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x36>
 800243a:	e027      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800243e:	613b      	str	r3, [r7, #16]
      break;
 8002440:	e027      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0c5b      	lsrs	r3, r3, #17
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800246e:	fb03 f202 	mul.w	r2, r3, r2
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e004      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	613b      	str	r3, [r7, #16]
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	613b      	str	r3, [r7, #16]
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	693b      	ldr	r3, [r7, #16]
}
 8002494:	4618      	mov	r0, r3
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	08002d40 	.word	0x08002d40
 80024ac:	08002d50 	.word	0x08002d50
 80024b0:	003d0900 	.word	0x003d0900

080024b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <RCC_Delay+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <RCC_Delay+0x38>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a5b      	lsrs	r3, r3, #9
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d0:	bf00      	nop
  }
  while (Delay --);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	60fa      	str	r2, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <RCC_Delay+0x1c>
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000010 	.word	0x20000010
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe ff80 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fa6e 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e035      	b.n	8002614 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIM_Base_Start_IT+0x90>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_TIM_Base_Start_IT+0x4e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d004      	beq.n	80025de <HAL_TIM_Base_Start_IT+0x4e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_Base_Start_IT+0x94>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d010      	beq.n	8002612 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002600:	e007      	b.n	8002612 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400

08002628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0202 	mvn.w	r2, #2
 8002654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9b4 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9a7 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9b6 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0204 	mvn.w	r2, #4
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f98a 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f97d 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f98c 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0208 	mvn.w	r2, #8
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2204      	movs	r2, #4
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f960 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f953 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f962 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b10      	cmp	r3, #16
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b10      	cmp	r3, #16
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0210 	mvn.w	r2, #16
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2208      	movs	r2, #8
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f936 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f929 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f938 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0201 	mvn.w	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe ff58 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa6b 	bl	8002cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8fc 	bl	80029fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0220 	mvn.w	r2, #32
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa36 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIM_ConfigClockSource+0x1c>
 8002850:	2302      	movs	r3, #2
 8002852:	e0b4      	b.n	80029be <HAL_TIM_ConfigClockSource+0x186>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288c:	d03e      	beq.n	800290c <HAL_TIM_ConfigClockSource+0xd4>
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	f200 8087 	bhi.w	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289a:	f000 8086 	beq.w	80029aa <HAL_TIM_ConfigClockSource+0x172>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a2:	d87f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	d01a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xa6>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d87b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	d050      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x11a>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d877      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b50      	cmp	r3, #80	; 0x50
 80028b6:	d03c      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0xfa>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d873      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d058      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x13a>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d86f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b30      	cmp	r3, #48	; 0x30
 80028c6:	d064      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d86b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d060      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d867      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d05a      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x15a>
 80028dc:	e062      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f000 f95e 	bl	8002bae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
      break;
 800290a:	e04f      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f000 f947 	bl	8002bae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800292e:	609a      	str	r2, [r3, #8]
      break;
 8002930:	e03c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 f8be 	bl	8002ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2150      	movs	r1, #80	; 0x50
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f915 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002950:	e02c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 f8dc 	bl	8002b1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2160      	movs	r1, #96	; 0x60
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f905 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002970:	e01c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	461a      	mov	r2, r3
 8002980:	f000 f89e 	bl	8002ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f8f5 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002990:	e00c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f000 f8ec 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 80029a2:	e003      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <TIM_Base_SetConfig+0xa8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0x28>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x28>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a22      	ldr	r2, [pc, #136]	; (8002abc <TIM_Base_SetConfig+0xac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <TIM_Base_SetConfig+0xa8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x52>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x52>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <TIM_Base_SetConfig+0xac>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <TIM_Base_SetConfig+0xa8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400

08002ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 030a 	bic.w	r3, r3, #10
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0210 	bic.w	r2, r3, #16
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	031b      	lsls	r3, r3, #12
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f043 0307 	orr.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	609a      	str	r2, [r3, #8]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e041      	b.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d004      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10c      	bne.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	4d0c      	ldr	r5, [pc, #48]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc6:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc8:	1b64      	subs	r4, r4, r5
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	f000 f822 	bl	8002d18 <_init>
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	4d0a      	ldr	r5, [pc, #40]	; (8002d00 <__libc_init_array+0x40>)
 8002cd8:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <__libc_init_array+0x44>)
 8002cda:	1b64      	subs	r4, r4, r5
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002d54 	.word	0x08002d54
 8002cfc:	08002d54 	.word	0x08002d54
 8002d00:	08002d54 	.word	0x08002d54
 8002d04:	08002d58 	.word	0x08002d58

08002d08 <memset>:
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4402      	add	r2, r0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	f803 1b01 	strb.w	r1, [r3], #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
