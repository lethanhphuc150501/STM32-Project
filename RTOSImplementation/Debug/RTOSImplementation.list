
RTOSImplementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003400  08003400  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003400  08003400  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003400  08003400  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  0800347c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800347c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca0c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eae  00000000  00000000  0002caa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001866e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8b2  00000000  00000000  000487be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088692  00000000  00000000  00057070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  000df754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b4 	.word	0x080032b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080032b4 	.word	0x080032b4

0800014c <button_reading>:
GPIO_PinState buffer2 = BUTTON_RELEASED;
GPIO_PinState stbl_rec = BUTTON_RELEASED;

enum flagButton button_state = BUTTON_RELEASED;

void button_reading() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	buffer1 = buffer2;
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <button_reading+0x34>)
 8000152:	781a      	ldrb	r2, [r3, #0]
 8000154:	4b0b      	ldr	r3, [pc, #44]	; (8000184 <button_reading+0x38>)
 8000156:	701a      	strb	r2, [r3, #0]
	buffer2 = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000158:	2101      	movs	r1, #1
 800015a:	480b      	ldr	r0, [pc, #44]	; (8000188 <button_reading+0x3c>)
 800015c:	f001 f9ee 	bl	800153c <HAL_GPIO_ReadPin>
 8000160:	4603      	mov	r3, r0
 8000162:	461a      	mov	r2, r3
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <button_reading+0x34>)
 8000166:	701a      	strb	r2, [r3, #0]
	if (buffer1 == buffer2)
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <button_reading+0x38>)
 800016a:	781a      	ldrb	r2, [r3, #0]
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <button_reading+0x34>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	429a      	cmp	r2, r3
 8000172:	d103      	bne.n	800017c <button_reading+0x30>
		stbl_rec = buffer1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <button_reading+0x38>)
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	4b04      	ldr	r3, [pc, #16]	; (800018c <button_reading+0x40>)
 800017a:	701a      	strb	r2, [r3, #0]
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000001 	.word	0x20000001
 8000184:	20000000 	.word	0x20000000
 8000188:	40010c00 	.word	0x40010c00
 800018c:	20000002 	.word	0x20000002

08000190 <is_button_pressed>:

static int is_button_pressed() {
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	return (stbl_rec == BUTTON_PRESSED);
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <is_button_pressed+0x1c>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	bf0c      	ite	eq
 800019c:	2301      	moveq	r3, #1
 800019e:	2300      	movne	r3, #0
 80001a0:	b2db      	uxtb	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000002 	.word	0x20000002

080001b0 <fsm_button>:

void fsm_button() {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	switch (button_state) {
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <fsm_button+0x4c>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d002      	beq.n	80001c2 <fsm_button+0x12>
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d009      	beq.n	80001d4 <fsm_button+0x24>
				button_state = BUTTON_PRESSED;
				SCH_Add_Task(LED_5_Display, 0, 0);
			}
			break;
		default:
			break;
 80001c0:	e019      	b.n	80001f6 <fsm_button+0x46>
			if (!is_button_pressed()) {
 80001c2:	f7ff ffe5 	bl	8000190 <is_button_pressed>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d111      	bne.n	80001f0 <fsm_button+0x40>
				button_state = BUTTON_RELEASED;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <fsm_button+0x4c>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
			break;
 80001d2:	e00d      	b.n	80001f0 <fsm_button+0x40>
			if (is_button_pressed()) {
 80001d4:	f7ff ffdc 	bl	8000190 <is_button_pressed>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d00a      	beq.n	80001f4 <fsm_button+0x44>
				button_state = BUTTON_PRESSED;
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <fsm_button+0x4c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
				SCH_Add_Task(LED_5_Display, 0, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2100      	movs	r1, #0
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <fsm_button+0x50>)
 80001ea:	f000 fa99 	bl	8000720 <SCH_Add_Task>
			break;
 80001ee:	e001      	b.n	80001f4 <fsm_button+0x44>
			break;
 80001f0:	bf00      	nop
 80001f2:	e000      	b.n	80001f6 <fsm_button+0x46>
			break;
 80001f4:	bf00      	nop
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000003 	.word	0x20000003
 8000200:	08000e21 	.word	0x08000e21

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fe87 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8ab 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f95b 	bl	80004cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000216:	f000 f8e3 	bl	80003e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800021a:	f000 f92d 	bl	8000478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800021e:	4847      	ldr	r0, [pc, #284]	; (800033c <main+0x138>)
 8000220:	f001 fe34 	bl	8001e8c <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000224:	f000 fa3c 	bl	80006a0 <SCH_Init>

  unsigned char task_index = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  task_index = SCH_Add_Task(LED_0_Display, 3000, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000232:	4843      	ldr	r0, [pc, #268]	; (8000340 <main+0x13c>)
 8000234:	f000 fa74 	bl	8000720 <SCH_Add_Task>
 8000238:	4603      	mov	r3, r0
 800023a:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	461a      	mov	r2, r3
 8000240:	4940      	ldr	r1, [pc, #256]	; (8000344 <main+0x140>)
 8000242:	4841      	ldr	r0, [pc, #260]	; (8000348 <main+0x144>)
 8000244:	f002 fbbc 	bl	80029c0 <siprintf>
 8000248:	4603      	mov	r3, r0
 800024a:	b29a      	uxth	r2, r3
 800024c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000250:	493d      	ldr	r1, [pc, #244]	; (8000348 <main+0x144>)
 8000252:	483e      	ldr	r0, [pc, #248]	; (800034c <main+0x148>)
 8000254:	f002 fa02 	bl	800265c <HAL_UART_Transmit>

  task_index = SCH_Add_Task(LED_1_Display, 1000, 7000);
 8000258:	f641 3258 	movw	r2, #7000	; 0x1b58
 800025c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000260:	483b      	ldr	r0, [pc, #236]	; (8000350 <main+0x14c>)
 8000262:	f000 fa5d 	bl	8000720 <SCH_Add_Task>
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	461a      	mov	r2, r3
 800026e:	4935      	ldr	r1, [pc, #212]	; (8000344 <main+0x140>)
 8000270:	4835      	ldr	r0, [pc, #212]	; (8000348 <main+0x144>)
 8000272:	f002 fba5 	bl	80029c0 <siprintf>
 8000276:	4603      	mov	r3, r0
 8000278:	b29a      	uxth	r2, r3
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	4932      	ldr	r1, [pc, #200]	; (8000348 <main+0x144>)
 8000280:	4832      	ldr	r0, [pc, #200]	; (800034c <main+0x148>)
 8000282:	f002 f9eb 	bl	800265c <HAL_UART_Transmit>

  task_index = SCH_Add_Task(LED_2_Display, 3000, 5000);
 8000286:	f241 3288 	movw	r2, #5000	; 0x1388
 800028a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800028e:	4831      	ldr	r0, [pc, #196]	; (8000354 <main+0x150>)
 8000290:	f000 fa46 	bl	8000720 <SCH_Add_Task>
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	461a      	mov	r2, r3
 800029c:	4929      	ldr	r1, [pc, #164]	; (8000344 <main+0x140>)
 800029e:	482a      	ldr	r0, [pc, #168]	; (8000348 <main+0x144>)
 80002a0:	f002 fb8e 	bl	80029c0 <siprintf>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ac:	4926      	ldr	r1, [pc, #152]	; (8000348 <main+0x144>)
 80002ae:	4827      	ldr	r0, [pc, #156]	; (800034c <main+0x148>)
 80002b0:	f002 f9d4 	bl	800265c <HAL_UART_Transmit>

  task_index = SCH_Add_Task(LED_3_Display, 2000, 4000);
 80002b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80002b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002bc:	4826      	ldr	r0, [pc, #152]	; (8000358 <main+0x154>)
 80002be:	f000 fa2f 	bl	8000720 <SCH_Add_Task>
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	461a      	mov	r2, r3
 80002ca:	491e      	ldr	r1, [pc, #120]	; (8000344 <main+0x140>)
 80002cc:	481e      	ldr	r0, [pc, #120]	; (8000348 <main+0x144>)
 80002ce:	f002 fb77 	bl	80029c0 <siprintf>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002da:	491b      	ldr	r1, [pc, #108]	; (8000348 <main+0x144>)
 80002dc:	481b      	ldr	r0, [pc, #108]	; (800034c <main+0x148>)
 80002de:	f002 f9bd 	bl	800265c <HAL_UART_Transmit>

  task_index = SCH_Add_Task(LED_4_Display, 0, 2000);
 80002e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002e6:	2100      	movs	r1, #0
 80002e8:	481c      	ldr	r0, [pc, #112]	; (800035c <main+0x158>)
 80002ea:	f000 fa19 	bl	8000720 <SCH_Add_Task>
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	461a      	mov	r2, r3
 80002f6:	4913      	ldr	r1, [pc, #76]	; (8000344 <main+0x140>)
 80002f8:	4813      	ldr	r0, [pc, #76]	; (8000348 <main+0x144>)
 80002fa:	f002 fb61 	bl	80029c0 <siprintf>
 80002fe:	4603      	mov	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	4910      	ldr	r1, [pc, #64]	; (8000348 <main+0x144>)
 8000308:	4810      	ldr	r0, [pc, #64]	; (800034c <main+0x148>)
 800030a:	f002 f9a7 	bl	800265c <HAL_UART_Transmit>

  setTimer0(1000);
 800030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000312:	f000 fdab 	bl	8000e6c <setTimer0>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000316:	f000 fae9 	bl	80008ec <SCH_Dispatch_Tasks>
	  fsm_button();
 800031a:	f7ff ff49 	bl	80001b0 <fsm_button>

	  if (timer0_flag == 1) {
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <main+0x15c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d1f7      	bne.n	8000316 <main+0x112>
		  HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032a:	480e      	ldr	r0, [pc, #56]	; (8000364 <main+0x160>)
 800032c:	f001 f935 	bl	800159a <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f000 fd9a 	bl	8000e6c <setTimer0>
	  SCH_Dispatch_Tasks();
 8000338:	e7ed      	b.n	8000316 <main+0x112>
 800033a:	bf00      	nop
 800033c:	200000fc 	.word	0x200000fc
 8000340:	08000cb5 	.word	0x08000cb5
 8000344:	080032cc 	.word	0x080032cc
 8000348:	20000090 	.word	0x20000090
 800034c:	20000144 	.word	0x20000144
 8000350:	08000cfd 	.word	0x08000cfd
 8000354:	08000d45 	.word	0x08000d45
 8000358:	08000d8d 	.word	0x08000d8d
 800035c:	08000dd5 	.word	0x08000dd5
 8000360:	20000260 	.word	0x20000260
 8000364:	40010800 	.word	0x40010800

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fb1a 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f914 	bl	80015cc <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003aa:	f000 f8f3 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	230f      	movs	r3, #15
 80003b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fb82 	bl	8001ad0 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003d2:	f000 f8df 	bl	8000594 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3740      	adds	r7, #64	; 0x40
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	463b      	mov	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_TIM2_Init+0x94>)
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_TIM2_Init+0x94>)
 8000406:	f240 321f 	movw	r2, #799	; 0x31f
 800040a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_TIM2_Init+0x94>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_TIM2_Init+0x94>)
 8000414:	2263      	movs	r2, #99	; 0x63
 8000416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_TIM2_Init+0x94>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_TIM2_Init+0x94>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000424:	4813      	ldr	r0, [pc, #76]	; (8000474 <MX_TIM2_Init+0x94>)
 8000426:	f001 fce1 	bl	8001dec <HAL_TIM_Base_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000430:	f000 f8b0 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4619      	mov	r1, r3
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_TIM2_Init+0x94>)
 8000442:	f001 fe77 	bl	8002134 <HAL_TIM_ConfigClockSource>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800044c:	f000 f8a2 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_TIM2_Init+0x94>)
 800045e:	f002 f843 	bl	80024e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000468:	f000 f894 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000fc 	.word	0x200000fc

08000478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART2_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004b0:	f002 f884 	bl	80025bc <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f86b 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000144 	.word	0x20000144
 80004c8:	40004400 	.word	0x40004400

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <MX_GPIO_Init+0x90>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <MX_GPIO_Init+0x90>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_GPIO_Init+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <MX_GPIO_Init+0x94>)
 8000518:	f001 f827 	bl	800156a <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 800051c:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000520:	60bb      	str	r3, [r7, #8]
                          |LED_4_Pin|LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4619      	mov	r1, r3
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <MX_GPIO_Init+0x94>)
 8000536:	f000 fe85 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800053a:	2301      	movs	r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_GPIO_Init+0x98>)
 800054e:	f000 fe79 	bl	8001244 <HAL_GPIO_Init>

}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00

08000568 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000570:	f000 f8b0 	bl	80006d4 <SCH_Update>
	button_reading();
 8000574:	f7ff fdea 	bl	800014c <button_reading>
	time_stamp++;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000580:	6013      	str	r3, [r2, #0]
	timer_run();
 8000582:	f000 fc8f 	bl	8000ea4 <timer_run>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000f4 	.word	0x200000f4

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <SCH_Delete_Task>:
unsigned char cur_no_tasks = 0;


//unsigned char Error_code_G = 0;

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80005a0:	b4b0      	push	{r4, r5, r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4939      	ldr	r1, [pc, #228]	; (8000698 <SCH_Delete_Task+0xf8>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d102      	bne.n	80005c8 <SCH_Delete_Task+0x28>
		// No task at this location...
		// Set the global error variable
		// Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
		// ...also return an error code
		Return_code = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e001      	b.n	80005cc <SCH_Delete_Task+0x2c>
	} else {
		Return_code = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
	}
	for (int i = TASK_INDEX + 1; i < SCH_MAX_TASKS; i++) {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	3301      	adds	r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	e021      	b.n	8000618 <SCH_Delete_Task+0x78>
		if (!(SCH_tasks_G[i].pTask)) break;
 80005d4:	4930      	ldr	r1, [pc, #192]	; (8000698 <SCH_Delete_Task+0xf8>)
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d01b      	beq.n	8000620 <SCH_Delete_Task+0x80>
		SCH_tasks_G[i-1] = SCH_tasks_G[i];
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	492a      	ldr	r1, [pc, #168]	; (8000698 <SCH_Delete_Task+0xf8>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	18c8      	adds	r0, r1, r3
 80005f8:	4927      	ldr	r1, [pc, #156]	; (8000698 <SCH_Delete_Task+0xf8>)
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	4604      	mov	r4, r0
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	682b      	ldr	r3, [r5, #0]
 8000610:	6023      	str	r3, [r4, #0]
	for (int i = TASK_INDEX + 1; i < SCH_MAX_TASKS; i++) {
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b09      	cmp	r3, #9
 800061c:	ddda      	ble.n	80005d4 <SCH_Delete_Task+0x34>
 800061e:	e000      	b.n	8000622 <SCH_Delete_Task+0x82>
		if (!(SCH_tasks_G[i].pTask)) break;
 8000620:	bf00      	nop
	}
	cur_no_tasks--;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SCH_Delete_Task+0xfc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <SCH_Delete_Task+0xfc>)
 800062c:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[cur_no_tasks].pTask = 0x0000;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <SCH_Delete_Task+0xfc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <SCH_Delete_Task+0xf8>)
 8000636:	460b      	mov	r3, r1
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_no_tasks].Delay = 0;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <SCH_Delete_Task+0xfc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <SCH_Delete_Task+0xf8>)
 800064c:	460b      	mov	r3, r1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	3304      	adds	r3, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_no_tasks].Period = 0;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <SCH_Delete_Task+0xfc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <SCH_Delete_Task+0xf8>)
 8000664:	460b      	mov	r3, r1
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	3308      	adds	r3, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_no_tasks].RunMe = 0;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <SCH_Delete_Task+0xfc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <SCH_Delete_Task+0xf8>)
 800067c:	460b      	mov	r3, r1
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	330c      	adds	r3, #12
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	//SCH_tasks_G[TASK_INDEX].Offset = 0;

	return Return_code;	// return status
 800068c:	7bfb      	ldrb	r3, [r7, #15]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bcb0      	pop	{r4, r5, r7}
 8000696:	4770      	bx	lr
 8000698:	2000018c 	.word	0x2000018c
 800069c:	20000254 	.word	0x20000254

080006a0 <SCH_Init>:

void SCH_Init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e006      	b.n	80006ba <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff76 	bl	80005a0 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3301      	adds	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b09      	cmp	r3, #9
 80006be:	d9f5      	bls.n	80006ac <SCH_Init+0xc>
	}
	cur_no_tasks = 0;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <SCH_Init+0x30>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	// - SCH_Delete_Task() will generate an error code,
	// (because the task array is empty)
	//Error_code_G = 0;
	//Timer_init();
	//Watchdog_init();
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000254 	.word	0x20000254

080006d4 <SCH_Update>:

void SCH_Update(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[0].pTask) {
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <SCH_Update+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d019      	beq.n	8000714 <SCH_Update+0x40>
		// Not yet ready to run: just decrement the delay
		SCH_tasks_G[0].Delay -= 1;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <SCH_Update+0x48>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a0d      	ldr	r2, [pc, #52]	; (800071c <SCH_Update+0x48>)
 80006e8:	6053      	str	r3, [r2, #4]
		// Check if there is a task at this location
		if (SCH_tasks_G[0].Delay <= 0) { // || SCH_tasks_G[0].Delay <= SCH_tasks_G[0].Offset) {
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <SCH_Update+0x48>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dc10      	bgt.n	8000714 <SCH_Update+0x40>
			// The task is due to run
			// Increase the 'RunMe' flag
			SCH_tasks_G[0].RunMe += 1;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <SCH_Update+0x48>)
 80006f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <SCH_Update+0x48>)
 8000702:	731a      	strb	r2, [r3, #12]
			//SCH_tasks_G[0].Offset = 0;
			if (SCH_tasks_G[0].Period) {
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <SCH_Update+0x48>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <SCH_Update+0x40>
				// Schedule periodic tasks to run again
				SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <SCH_Update+0x48>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4a02      	ldr	r2, [pc, #8]	; (800071c <SCH_Update+0x48>)
 8000712:	6053      	str	r3, [r2, #4]
				SCH_tasks_G[Index].Delay -= 1;
			}
		}
	}
	*/
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	2000018c 	.word	0x2000018c

08000720 <SCH_Add_Task>:
 * @param	DELAY - the delay (in ticks) before task is first executed
 * @param	PERIOD - the interval (in ticks) between repeated executions
 * 			of the task
 * @retval	TaskID
 */
unsigned char SCH_Add_Task(void (* pFunction) (), unsigned int DELAY, unsigned int PERIOD) {
 8000720:	b4b0      	push	{r4, r5, r7}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	// Task structure is overload
	if (cur_no_tasks >= SCH_MAX_TASKS) {
 800072c:	4b6c      	ldr	r3, [pc, #432]	; (80008e0 <SCH_Add_Task+0x1c0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b09      	cmp	r3, #9
 8000732:	d901      	bls.n	8000738 <SCH_Add_Task+0x18>
		return SCH_MAX_TASKS;
 8000734:	230a      	movs	r3, #10
 8000736:	e0ce      	b.n	80008d6 <SCH_Add_Task+0x1b6>
	}

	unsigned int DELAY_CNT = DELAY / TICKS;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4a6a      	ldr	r2, [pc, #424]	; (80008e4 <SCH_Add_Task+0x1c4>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	08db      	lsrs	r3, r3, #3
 8000742:	61bb      	str	r3, [r7, #24]
	unsigned int PERIOD_CNT = PERIOD / TICKS;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a67      	ldr	r2, [pc, #412]	; (80008e4 <SCH_Add_Task+0x1c4>)
 8000748:	fba2 2303 	umull	r2, r3, r2, r3
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	617b      	str	r3, [r7, #20]

	// Task structure is available
	unsigned char Index = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned int sum_delay = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000760:	e02d      	b.n	80007be <SCH_Add_Task+0x9e>
		if (!(SCH_tasks_G[Index].pTask)) break;
 8000762:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000766:	4960      	ldr	r1, [pc, #384]	; (80008e8 <SCH_Add_Task+0x1c8>)
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	440b      	add	r3, r1
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d027      	beq.n	80007c8 <SCH_Add_Task+0xa8>
		if (sum_delay + SCH_tasks_G[Index].Delay > DELAY_CNT) break;
 8000778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800077c:	495a      	ldr	r1, [pc, #360]	; (80008e8 <SCH_Add_Task+0x1c8>)
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	3304      	adds	r3, #4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	4413      	add	r3, r2
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	429a      	cmp	r2, r3
 8000796:	d319      	bcc.n	80007cc <SCH_Add_Task+0xac>
		sum_delay += SCH_tasks_G[Index].Delay;
 8000798:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800079c:	4952      	ldr	r1, [pc, #328]	; (80008e8 <SCH_Add_Task+0x1c8>)
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	3304      	adds	r3, #4
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	4413      	add	r3, r2
 80007b2:	623b      	str	r3, [r7, #32]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80007b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b8:	3301      	adds	r3, #1
 80007ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c2:	2b09      	cmp	r3, #9
 80007c4:	d9cd      	bls.n	8000762 <SCH_Add_Task+0x42>
 80007c6:	e002      	b.n	80007ce <SCH_Add_Task+0xae>
		if (!(SCH_tasks_G[Index].pTask)) break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <SCH_Add_Task+0xae>
		if (sum_delay + SCH_tasks_G[Index].Delay > DELAY_CNT) break;
 80007cc:	bf00      	nop
	}
	// Index - the position want to add

	// Shift other position after Index
	for (int i = SCH_MAX_TASKS - 2; i >= 0; i--) {
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	e029      	b.n	8000828 <SCH_Add_Task+0x108>
		if (i < Index) break;
 80007d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	429a      	cmp	r2, r3
 80007dc:	db28      	blt.n	8000830 <SCH_Add_Task+0x110>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 80007de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007e2:	4941      	ldr	r1, [pc, #260]	; (80008e8 <SCH_Add_Task+0x1c8>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d015      	beq.n	8000820 <SCH_Add_Task+0x100>
		SCH_tasks_G[i+1] = SCH_tasks_G[i];
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	493b      	ldr	r1, [pc, #236]	; (80008e8 <SCH_Add_Task+0x1c8>)
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	18c8      	adds	r0, r1, r3
 8000804:	4938      	ldr	r1, [pc, #224]	; (80008e8 <SCH_Add_Task+0x1c8>)
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	4604      	mov	r4, r0
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	6023      	str	r3, [r4, #0]
 800081e:	e000      	b.n	8000822 <SCH_Add_Task+0x102>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 8000820:	bf00      	nop
	for (int i = SCH_MAX_TASKS - 2; i >= 0; i--) {
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b01      	subs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	dad2      	bge.n	80007d4 <SCH_Add_Task+0xb4>
 800082e:	e000      	b.n	8000832 <SCH_Add_Task+0x112>
		if (i < Index) break;
 8000830:	bf00      	nop
	}
	//if (DELAY_CNT == sum_delay) SCH_tasks_G[Index+1].Offset += 1;
	//else SCH_tasks_G[Index+1].Delay -= (DELAY_CNT - sum_delay);
	SCH_tasks_G[Index+1].Delay -= (DELAY_CNT - sum_delay);
 8000832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	492b      	ldr	r1, [pc, #172]	; (80008e8 <SCH_Add_Task+0x1c8>)
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	3304      	adds	r3, #4
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	6a3a      	ldr	r2, [r7, #32]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4419      	add	r1, r3
 8000852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	4608      	mov	r0, r1
 800085a:	4923      	ldr	r1, [pc, #140]	; (80008e8 <SCH_Add_Task+0x1c8>)
 800085c:	4613      	mov	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	3304      	adds	r3, #4
 8000868:	6018      	str	r0, [r3, #0]
	// Assign Index position
	SCH_tasks_G[Index].pTask = pFunction;
 800086a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800086e:	491e      	ldr	r1, [pc, #120]	; (80008e8 <SCH_Add_Task+0x1c8>)
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY_CNT - sum_delay;
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000888:	4618      	mov	r0, r3
 800088a:	4917      	ldr	r1, [pc, #92]	; (80008e8 <SCH_Add_Task+0x1c8>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3304      	adds	r3, #4
 8000898:	6018      	str	r0, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD_CNT;
 800089a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <SCH_Add_Task+0x1c8>)
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4403      	add	r3, r0
 80008ac:	3308      	adds	r3, #8
 80008ae:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80008b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <SCH_Add_Task+0x1c8>)
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	330c      	adds	r3, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]

	// Increase number of tasks
	cur_no_tasks++;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SCH_Add_Task+0x1c0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SCH_Add_Task+0x1c0>)
 80008d0:	701a      	strb	r2, [r3, #0]
	return Index;
 80008d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	SCH_tasks_G[Index].Period = PERIOD / TICKS;
	SCH_tasks_G[Index].RunMe = 0;
	// return position of task (to allow later deletion)
	return Index;
	*/
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	372c      	adds	r7, #44	; 0x2c
 80008da:	46bd      	mov	sp, r7
 80008dc:	bcb0      	pop	{r4, r5, r7}
 80008de:	4770      	bx	lr
 80008e0:	20000254 	.word	0x20000254
 80008e4:	cccccccd 	.word	0xcccccccd
 80008e8:	2000018c 	.word	0x2000018c

080008ec <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[0].RunMe > 0 || SCH_tasks_G[0].Delay <= 0) {
 80008f2:	4b65      	ldr	r3, [pc, #404]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80008f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dc04      	bgt.n	8000906 <SCH_Dispatch_Tasks+0x1a>
 80008fc:	4b62      	ldr	r3, [pc, #392]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	f300 80bc 	bgt.w	8000a7e <SCH_Dispatch_Tasks+0x192>
		int diff = time_stamp;
 8000906:	4b61      	ldr	r3, [pc, #388]	; (8000a8c <SCH_Dispatch_Tasks+0x1a0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61bb      	str	r3, [r7, #24]
		(* SCH_tasks_G[0].pTask)();	// Run the task
 800090c:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4798      	blx	r3

		if (SCH_tasks_G[0].RunMe > 0) SCH_tasks_G[0].RunMe -= 1;	// Reset/reduce RunMe flag
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000914:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000918:	2b00      	cmp	r3, #0
 800091a:	dd08      	ble.n	800092e <SCH_Dispatch_Tasks+0x42>
 800091c:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800091e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	b25a      	sxtb	r2, r3
 800092a:	4b57      	ldr	r3, [pc, #348]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800092c:	731a      	strb	r2, [r3, #12]
		// Periodic tasks will automatically run again
		// - if this is a 'one shot' task, remove it from the array
		if (SCH_tasks_G[0].Period == 0) {
 800092e:	4b56      	ldr	r3, [pc, #344]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <SCH_Dispatch_Tasks+0x52>
			SCH_Delete_Task(0);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe32 	bl	80005a0 <SCH_Delete_Task>
 800093c:	e078      	b.n	8000a30 <SCH_Dispatch_Tasks+0x144>
		} else if (SCH_tasks_G[0].RunMe <= 0 && cur_no_tasks > 1) {
 800093e:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000940:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dc73      	bgt.n	8000a30 <SCH_Dispatch_Tasks+0x144>
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <SCH_Dispatch_Tasks+0x1a4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d96f      	bls.n	8000a30 <SCH_Dispatch_Tasks+0x144>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4a4c      	ldr	r2, [pc, #304]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000956:	6053      	str	r3, [r2, #4]
			sTask expired_task = SCH_tasks_G[0];
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800095a:	1d3c      	adds	r4, r7, #4
 800095c:	461d      	mov	r5, r3
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	6023      	str	r3, [r4, #0]
			for (int i = 1; i < SCH_MAX_TASKS; i++) {
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e05c      	b.n	8000a26 <SCH_Dispatch_Tasks+0x13a>
				if (!(SCH_tasks_G[i].pTask)) {
 800096c:	4946      	ldr	r1, [pc, #280]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d056      	beq.n	8000a2e <SCH_Dispatch_Tasks+0x142>
					//sbSCH_tasks_G[i].Offset += 1;
					break;
				}
				if (expired_task.Delay >= SCH_tasks_G[i].Delay) {
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	4841      	ldr	r0, [pc, #260]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4403      	add	r3, r0
 8000990:	3304      	adds	r3, #4
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4299      	cmp	r1, r3
 8000996:	db2e      	blt.n	80009f6 <SCH_Dispatch_Tasks+0x10a>
					expired_task.Delay -= SCH_tasks_G[i].Delay;
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	483b      	ldr	r0, [pc, #236]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4403      	add	r3, r0
 80009a8:	3304      	adds	r3, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1acb      	subs	r3, r1, r3
 80009ae:	60bb      	str	r3, [r7, #8]
					//if (SCH_tasks_G[i].Delay == 0) expired_task.Offset += 1;
					SCH_tasks_G[i-1] = SCH_tasks_G[i];
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	4934      	ldr	r1, [pc, #208]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	18c8      	adds	r0, r1, r3
 80009c0:	4931      	ldr	r1, [pc, #196]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	4604      	mov	r4, r0
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	6023      	str	r3, [r4, #0]
					SCH_tasks_G[i] = expired_task;
 80009da:	492b      	ldr	r1, [pc, #172]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	461d      	mov	r5, r3
 80009ea:	1d3c      	adds	r4, r7, #4
 80009ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	602b      	str	r3, [r5, #0]
 80009f4:	e014      	b.n	8000a20 <SCH_Dispatch_Tasks+0x134>
				} else {
					SCH_tasks_G[i].Delay -= expired_task.Delay;
 80009f6:	4924      	ldr	r1, [pc, #144]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 80009f8:	69fa      	ldr	r2, [r7, #28]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	3304      	adds	r3, #4
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1ad1      	subs	r1, r2, r3
 8000a0c:	481e      	ldr	r0, [pc, #120]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4403      	add	r3, r0
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	6019      	str	r1, [r3, #0]
					//if (expired_task.Delay == 0) SCH_tasks_G[i].Offset += 1;
					break;
 8000a1e:	e007      	b.n	8000a30 <SCH_Dispatch_Tasks+0x144>
			for (int i = 1; i < SCH_MAX_TASKS; i++) {
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	3301      	adds	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	2b09      	cmp	r3, #9
 8000a2a:	dd9f      	ble.n	800096c <SCH_Dispatch_Tasks+0x80>
 8000a2c:	e000      	b.n	8000a30 <SCH_Dispatch_Tasks+0x144>
					break;
 8000a2e:	bf00      	nop
				}
			}
		}
		diff = time_stamp - diff;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <SCH_Dispatch_Tasks+0x1a0>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	61bb      	str	r3, [r7, #24]
		time_offset += diff;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a44:	6013      	str	r3, [r2, #0]
		if (SCH_tasks_G[0].Delay - time_offset > 0) {
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dd0a      	ble.n	8000a6a <SCH_Dispatch_Tasks+0x17e>
			SCH_tasks_G[0].Delay -= time_offset;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a60:	6053      	str	r3, [r2, #4]
			time_offset = 0;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
	// Report system status
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
	*/
}
 8000a68:	e009      	b.n	8000a7e <SCH_Dispatch_Tasks+0x192>
			time_offset -= SCH_tasks_G[0].Delay;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SCH_Dispatch_Tasks+0x1a8>)
 8000a76:	6013      	str	r3, [r2, #0]
			SCH_tasks_G[0].Delay = 0;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SCH_Dispatch_Tasks+0x19c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bdb0      	pop	{r4, r5, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000018c 	.word	0x2000018c
 8000a8c:	200000f4 	.word	0x200000f4
 8000a90:	20000254 	.word	0x20000254
 8000a94:	200000f8 	.word	0x200000f8

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f000 fb53 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fb6c 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <HAL_UART_MspInit+0x88>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d12f      	bne.n	8000bc4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6e:	61d3      	str	r3, [r2, #28]
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b94:	2304      	movs	r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <HAL_UART_MspInit+0x90>)
 8000ba8:	f000 fb4c 	bl	8001244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bac:	2308      	movs	r3, #8
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x90>)
 8000bc0:	f000 fb40 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f9c3 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM2_IRQHandler+0x10>)
 8000c2e:	f001 f979 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000fc 	.word	0x200000fc

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f001 fe76 	bl	800295c <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20002800 	.word	0x20002800
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000258 	.word	0x20000258
 8000ca4:	20000278 	.word	0x20000278

08000ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <LED_0_Display>:
 *  Created on: Aug 1, 2023
 *      Author: Phuc Le
 */

#include "task.h"
void LED_0_Display() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8000cb8:	2110      	movs	r1, #16
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LED_0_Display+0x34>)
 8000cbc:	f000 fc6d 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 0 is dispatched at %d\r\n", time_stamp), 1000);
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <LED_0_Display+0x38>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	490a      	ldr	r1, [pc, #40]	; (8000cf0 <LED_0_Display+0x3c>)
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <LED_0_Display+0x40>)
 8000cca:	f001 fe79 	bl	80029c0 <siprintf>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <LED_0_Display+0x40>)
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <LED_0_Display+0x44>)
 8000cda:	f001 fcbf 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 f97e 	bl	8000fe0 <HAL_Delay>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	200000f4 	.word	0x200000f4
 8000cf0:	080032e0 	.word	0x080032e0
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	20000144 	.word	0x20000144

08000cfc <LED_1_Display>:

void LED_1_Display() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000d00:	2120      	movs	r1, #32
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LED_1_Display+0x34>)
 8000d04:	f000 fc49 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 1 is dispatched at %d\r\n", time_stamp), 1000);
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <LED_1_Display+0x38>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	490a      	ldr	r1, [pc, #40]	; (8000d38 <LED_1_Display+0x3c>)
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <LED_1_Display+0x40>)
 8000d12:	f001 fe55 	bl	80029c0 <siprintf>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	4907      	ldr	r1, [pc, #28]	; (8000d3c <LED_1_Display+0x40>)
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <LED_1_Display+0x44>)
 8000d22:	f001 fc9b 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 f95a 	bl	8000fe0 <HAL_Delay>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800
 8000d34:	200000f4 	.word	0x200000f4
 8000d38:	08003300 	.word	0x08003300
 8000d3c:	20000090 	.word	0x20000090
 8000d40:	20000144 	.word	0x20000144

08000d44 <LED_2_Display>:

void LED_2_Display() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LED_2_Display+0x34>)
 8000d4c:	f000 fc25 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 2 is dispatched at %d\r\n", time_stamp), 1000);
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <LED_2_Display+0x38>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	490a      	ldr	r1, [pc, #40]	; (8000d80 <LED_2_Display+0x3c>)
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <LED_2_Display+0x40>)
 8000d5a:	f001 fe31 	bl	80029c0 <siprintf>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	4907      	ldr	r1, [pc, #28]	; (8000d84 <LED_2_Display+0x40>)
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <LED_2_Display+0x44>)
 8000d6a:	f001 fc77 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f000 f936 	bl	8000fe0 <HAL_Delay>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	200000f4 	.word	0x200000f4
 8000d80:	08003320 	.word	0x08003320
 8000d84:	20000090 	.word	0x20000090
 8000d88:	20000144 	.word	0x20000144

08000d8c <LED_3_Display>:

void LED_3_Display() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LED_3_Display+0x34>)
 8000d94:	f000 fc01 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 3 is dispatched at %d\r\n", time_stamp), 1000);
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <LED_3_Display+0x38>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	490a      	ldr	r1, [pc, #40]	; (8000dc8 <LED_3_Display+0x3c>)
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <LED_3_Display+0x40>)
 8000da2:	f001 fe0d 	bl	80029c0 <siprintf>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	4907      	ldr	r1, [pc, #28]	; (8000dcc <LED_3_Display+0x40>)
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <LED_3_Display+0x44>)
 8000db2:	f001 fc53 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 f912 	bl	8000fe0 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	200000f4 	.word	0x200000f4
 8000dc8:	08003340 	.word	0x08003340
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	20000144 	.word	0x20000144

08000dd4 <LED_4_Display>:

void LED_4_Display() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LED_4_Display+0x38>)
 8000dde:	f000 fbdc 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 4 is dispatched at %d\r\n", time_stamp), 1000);
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <LED_4_Display+0x3c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	490a      	ldr	r1, [pc, #40]	; (8000e14 <LED_4_Display+0x40>)
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <LED_4_Display+0x44>)
 8000dec:	f001 fde8 	bl	80029c0 <siprintf>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <LED_4_Display+0x44>)
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <LED_4_Display+0x48>)
 8000dfc:	f001 fc2e 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(10);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f000 f8ed 	bl	8000fe0 <HAL_Delay>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	200000f4 	.word	0x200000f4
 8000e14:	08003360 	.word	0x08003360
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	20000144 	.word	0x20000144

08000e20 <LED_5_Display>:

void LED_5_Display() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <LED_5_Display+0x38>)
 8000e2a:	f000 fbb6 	bl	800159a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 5 is dispatched at %d\r\n", time_stamp), 1000);
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LED_5_Display+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	490a      	ldr	r1, [pc, #40]	; (8000e60 <LED_5_Display+0x40>)
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LED_5_Display+0x44>)
 8000e38:	f001 fdc2 	bl	80029c0 <siprintf>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <LED_5_Display+0x44>)
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <LED_5_Display+0x48>)
 8000e48:	f001 fc08 	bl	800265c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e50:	f000 f8c6 	bl	8000fe0 <HAL_Delay>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	200000f4 	.word	0x200000f4
 8000e60:	08003380 	.word	0x08003380
 8000e64:	20000090 	.word	0x20000090
 8000e68:	20000144 	.word	0x20000144

08000e6c <setTimer0>:
#include "timer.h"

int timer0_counter;
unsigned char timer0_flag;

void setTimer0(int duration) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <setTimer0+0x2c>)
 8000e78:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7c:	1092      	asrs	r2, r2, #2
 8000e7e:	17db      	asrs	r3, r3, #31
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <setTimer0+0x30>)
 8000e84:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <setTimer0+0x34>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	2000025c 	.word	0x2000025c
 8000ea0:	20000260 	.word	0x20000260

08000ea4 <timer_run>:

void timer_run() {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	timer0_counter--;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <timer_run+0x24>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <timer_run+0x24>)
 8000eb0:	6013      	str	r3, [r2, #0]
	if (timer0_counter <= 0) {
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <timer_run+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dc02      	bgt.n	8000ec0 <timer_run+0x1c>
		timer0_flag = 1;
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <timer_run+0x28>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	2000025c 	.word	0x2000025c
 8000ecc:	20000260 	.word	0x20000260

08000ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff feea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eec:	4c09      	ldr	r4, [pc, #36]	; (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f001 fd35 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff f981 	bl	8000204 <main>
  bx lr
 8000f02:	4770      	bx	lr
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f0c:	08003408 	.word	0x08003408
  ldr r2, =_sbss
 8000f10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f14:	20000278 	.word	0x20000278

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f947 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fdae 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f95f 	bl	800122a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f927 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000264 	.word	0x20000264

08000fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000264 	.word	0x20000264

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffe0 	bl	8000fcc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	; (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff90 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff2d 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff42 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff35 	bl	800108c <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e161      	b.n	800151c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8150 	bne.w	8001516 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a97      	ldr	r2, [pc, #604]	; (80014d8 <HAL_GPIO_Init+0x294>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001280:	4a95      	ldr	r2, [pc, #596]	; (80014d8 <HAL_GPIO_Init+0x294>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d875      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001286:	4a95      	ldr	r2, [pc, #596]	; (80014dc <HAL_GPIO_Init+0x298>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d058      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 800128c:	4a93      	ldr	r2, [pc, #588]	; (80014dc <HAL_GPIO_Init+0x298>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d86f      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001292:	4a93      	ldr	r2, [pc, #588]	; (80014e0 <HAL_GPIO_Init+0x29c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d052      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001298:	4a91      	ldr	r2, [pc, #580]	; (80014e0 <HAL_GPIO_Init+0x29c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d869      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 800129e:	4a91      	ldr	r2, [pc, #580]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04c      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012a4:	4a8f      	ldr	r2, [pc, #572]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d863      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012aa:	4a8f      	ldr	r2, [pc, #572]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d046      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012b0:	4a8d      	ldr	r2, [pc, #564]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d85d      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d82a      	bhi.n	8001310 <HAL_GPIO_Init+0xcc>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d859      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <HAL_GPIO_Init+0x80>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	08001319 	.word	0x08001319
 80012cc:	0800132b 	.word	0x0800132b
 80012d0:	0800136d 	.word	0x0800136d
 80012d4:	08001373 	.word	0x08001373
 80012d8:	08001373 	.word	0x08001373
 80012dc:	08001373 	.word	0x08001373
 80012e0:	08001373 	.word	0x08001373
 80012e4:	08001373 	.word	0x08001373
 80012e8:	08001373 	.word	0x08001373
 80012ec:	08001373 	.word	0x08001373
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001373 	.word	0x08001373
 80012fc:	08001373 	.word	0x08001373
 8001300:	08001373 	.word	0x08001373
 8001304:	08001373 	.word	0x08001373
 8001308:	08001321 	.word	0x08001321
 800130c:	08001335 	.word	0x08001335
 8001310:	4a76      	ldr	r2, [pc, #472]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e02c      	b.n	8001372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e029      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e024      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3308      	adds	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e01f      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	330c      	adds	r3, #12
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e01a      	b.n	8001374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	2304      	movs	r3, #4
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e013      	b.n	8001374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	611a      	str	r2, [r3, #16]
          break;
 800135e:	e009      	b.n	8001374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	615a      	str	r2, [r3, #20]
          break;
 800136a:	e003      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x130>
          break;
 8001372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d801      	bhi.n	800137e <HAL_GPIO_Init+0x13a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_Init+0x13e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d802      	bhi.n	8001390 <HAL_GPIO_Init+0x14c>
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x152>
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3b08      	subs	r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80a9 	beq.w	8001516 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <HAL_GPIO_Init+0x2b4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1dc>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x2bc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1d8>
 8001418:	2302      	movs	r3, #2
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 800141c:	2303      	movs	r3, #3
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001424:	2300      	movs	r3, #0
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001436:	492f      	ldr	r1, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	492b      	ldr	r1, [pc, #172]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4927      	ldr	r1, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4921      	ldr	r1, [pc, #132]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	491d      	ldr	r1, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001490:	4013      	ands	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4917      	ldr	r1, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4913      	ldr	r1, [pc, #76]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01f      	beq.n	8001508 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	490d      	ldr	r1, [pc, #52]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e01f      	b.n	8001516 <HAL_GPIO_Init+0x2d2>
 80014d6:	bf00      	nop
 80014d8:	10320000 	.word	0x10320000
 80014dc:	10310000 	.word	0x10310000
 80014e0:	10220000 	.word	0x10220000
 80014e4:	10210000 	.word	0x10210000
 80014e8:	10120000 	.word	0x10120000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	40011000 	.word	0x40011000
 8001504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_GPIO_Init+0x2f4>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	43db      	mvns	r3, r3
 8001510:	4909      	ldr	r1, [pc, #36]	; (8001538 <HAL_GPIO_Init+0x2f4>)
 8001512:	4013      	ands	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae96 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	372c      	adds	r7, #44	; 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	807b      	strh	r3, [r7, #2]
 8001576:	4613      	mov	r3, r2
 8001578:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001586:	e003      	b.n	8001590 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	041a      	lsls	r2, r3, #16
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	400b      	ands	r3, r1
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e272      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d112      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
 8001604:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d10b      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	4b89      	ldr	r3, [pc, #548]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d06c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x12c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d168      	bne.n	80016f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e24c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x76>
 8001634:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e02e      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a77      	ldr	r2, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0xbc>
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6e      	ldr	r2, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001688:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6a      	ldr	r2, [pc, #424]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc90 	bl	8000fcc <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc8c 	bl	8000fcc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e200      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xe4>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc7c 	bl	8000fcc <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc78 	bl	8000fcc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1ec      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x10c>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1c0      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4939      	ldr	r1, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_RCC_OscConfig+0x270>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fc31 	bl	8000fcc <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fc2d 	bl	8000fcc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1a1      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4927      	ldr	r1, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x270>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc10 	bl	8000fcc <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc0c 	bl	8000fcc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e180      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d03a      	beq.n	8001850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d019      	beq.n	8001816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbf0 	bl	8000fcc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbec 	bl	8000fcc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e160      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f000 face 	bl	8001db0 <RCC_Delay>
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fbd6 	bl	8000fcc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001822:	e00f      	b.n	8001844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff fbd2 	bl	8000fcc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d908      	bls.n	8001844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e146      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	42420000 	.word	0x42420000
 8001840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e9      	bne.n	8001824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a6 	beq.w	80019aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10d      	bne.n	800188a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a87      	ldr	r2, [pc, #540]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <HAL_RCC_OscConfig+0x4c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x4c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7e      	ldr	r2, [pc, #504]	; (8001a94 <HAL_RCC_OscConfig+0x4c8>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb93 	bl	8000fcc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fb8f 	bl	8000fcc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e103      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <HAL_RCC_OscConfig+0x4c8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x312>
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e02d      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x334>
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a69      	ldr	r2, [pc, #420]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a66      	ldr	r2, [pc, #408]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	e01c      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x356>
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a60      	ldr	r2, [pc, #384]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a5d      	ldr	r2, [pc, #372]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e00b      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a5a      	ldr	r2, [pc, #360]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fb43 	bl	8000fcc <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff fb3f 	bl	8000fcc <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0b1      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ee      	beq.n	800194a <HAL_RCC_OscConfig+0x37e>
 800196c:	e014      	b.n	8001998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb2d 	bl	8000fcc <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fb29 	bl	8000fcc <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e09b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ee      	bne.n	8001976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a3b      	ldr	r2, [pc, #236]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d061      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d146      	bne.n	8001a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fafd 	bl	8000fcc <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff faf9 	bl	8000fcc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e06d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4921      	ldr	r1, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a19      	ldr	r1, [r3, #32]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	430b      	orrs	r3, r1
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff facd 	bl	8000fcc <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fac9 	bl	8000fcc <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e03d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46a>
 8001a54:	e035      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x4cc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fab6 	bl	8000fcc <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fab2 	bl	8000fcc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e026      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x498>
 8001a82:	e01e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e019      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x500>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d0      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4965      	ldr	r1, [pc, #404]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e073      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4936      	ldr	r1, [pc, #216]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa04 	bl	8000fcc <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa00 	bl	8000fcc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e053      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1cc>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f962 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	080033a0 	.word	0x080033a0
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x36>
 8001cd2:	e027      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd6:	613b      	str	r3, [r7, #16]
      break;
 8001cd8:	e027      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0c5b      	lsrs	r3, r3, #17
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d06:	fb03 f202 	mul.w	r2, r3, r2
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e004      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	613b      	str	r3, [r7, #16]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d26:	613b      	str	r3, [r7, #16]
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	693b      	ldr	r3, [r7, #16]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	007a1200 	.word	0x007a1200
 8001d40:	080033b8 	.word	0x080033b8
 8001d44:	080033c8 	.word	0x080033c8
 8001d48:	003d0900 	.word	0x003d0900

08001d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff2 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080033b0 	.word	0x080033b0

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0adb      	lsrs	r3, r3, #11
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080033b0 	.word	0x080033b0

08001db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <RCC_Delay+0x34>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <RCC_Delay+0x38>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a5b      	lsrs	r3, r3, #9
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dcc:	bf00      	nop
  }
  while (Delay --);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1e5a      	subs	r2, r3, #1
 8001dd2:	60fa      	str	r2, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f9      	bne.n	8001dcc <RCC_Delay+0x1c>
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000004 	.word	0x20000004
 8001de8:	10624dd3 	.word	0x10624dd3

08001dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e041      	b.n	8001e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fe72 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f000 fa6e 	bl	800230c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d001      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e035      	b.n	8001f10 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_TIM_Base_Start_IT+0x90>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x4e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x4e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_TIM_Base_Start_IT+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d010      	beq.n	8001f0e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400

08001f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f9b4 	bl	80022d4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9a7 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f9b6 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0204 	mvn.w	r2, #4
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f98a 	bl	80022d4 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f97d 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f98c 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0208 	mvn.w	r2, #8
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f960 	bl	80022d4 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f953 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f962 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b10      	cmp	r3, #16
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b10      	cmp	r3, #16
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0210 	mvn.w	r2, #16
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2208      	movs	r2, #8
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f936 	bl	80022d4 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f929 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f938 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0201 	mvn.w	r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fa60 	bl	8000568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa6b 	bl	80025aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8fc 	bl	80022f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b20      	cmp	r3, #32
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0220 	mvn.w	r2, #32
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa36 	bl	8002598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x1c>
 800214c:	2302      	movs	r3, #2
 800214e:	e0b4      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x186>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800216e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002188:	d03e      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0xd4>
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	f200 8087 	bhi.w	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002196:	f000 8086 	beq.w	80022a6 <HAL_TIM_ConfigClockSource+0x172>
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219e:	d87f      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021a0:	2b70      	cmp	r3, #112	; 0x70
 80021a2:	d01a      	beq.n	80021da <HAL_TIM_ConfigClockSource+0xa6>
 80021a4:	2b70      	cmp	r3, #112	; 0x70
 80021a6:	d87b      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021a8:	2b60      	cmp	r3, #96	; 0x60
 80021aa:	d050      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x11a>
 80021ac:	2b60      	cmp	r3, #96	; 0x60
 80021ae:	d877      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021b0:	2b50      	cmp	r3, #80	; 0x50
 80021b2:	d03c      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xfa>
 80021b4:	2b50      	cmp	r3, #80	; 0x50
 80021b6:	d873      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d058      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x13a>
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d86f      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c0:	2b30      	cmp	r3, #48	; 0x30
 80021c2:	d064      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x15a>
 80021c4:	2b30      	cmp	r3, #48	; 0x30
 80021c6:	d86b      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d060      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x15a>
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d867      	bhi.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05c      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x15a>
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d05a      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x15a>
 80021d8:	e062      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6899      	ldr	r1, [r3, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f000 f95e 	bl	80024aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	609a      	str	r2, [r3, #8]
      break;
 8002206:	e04f      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f000 f947 	bl	80024aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800222a:	609a      	str	r2, [r3, #8]
      break;
 800222c:	e03c      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	461a      	mov	r2, r3
 800223c:	f000 f8be 	bl	80023bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2150      	movs	r1, #80	; 0x50
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f915 	bl	8002476 <TIM_ITRx_SetConfig>
      break;
 800224c:	e02c      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	461a      	mov	r2, r3
 800225c:	f000 f8dc 	bl	8002418 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2160      	movs	r1, #96	; 0x60
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f905 	bl	8002476 <TIM_ITRx_SetConfig>
      break;
 800226c:	e01c      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	461a      	mov	r2, r3
 800227c:	f000 f89e 	bl	80023bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f8f5 	bl	8002476 <TIM_ITRx_SetConfig>
      break;
 800228c:	e00c      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f000 f8ec 	bl	8002476 <TIM_ITRx_SetConfig>
      break;
 800229e:	e003      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e000      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <TIM_Base_SetConfig+0xa8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_Base_SetConfig+0x28>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0x28>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <TIM_Base_SetConfig+0xac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <TIM_Base_SetConfig+0xa8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x52>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x52>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <TIM_Base_SetConfig+0xac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <TIM_Base_SetConfig+0xa8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400

080023bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f023 0201 	bic.w	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f023 030a 	bic.w	r3, r3, #10
 80023f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0210 	bic.w	r2, r3, #16
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	031b      	lsls	r3, r3, #12
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002454:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	621a      	str	r2, [r3, #32]
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	f043 0307 	orr.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	609a      	str	r2, [r3, #8]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e041      	b.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d004      	beq.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d10c      	bne.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4313      	orrs	r3, r2
 8002568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40000400 	.word	0x40000400

08002598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e042      	b.n	8002654 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe faae 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f91d 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b20      	cmp	r3, #32
 800267a:	d16d      	bne.n	8002758 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_UART_Transmit+0x2c>
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e066      	b.n	800275a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2221      	movs	r2, #33	; 0x21
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800269a:	f7fe fc97 	bl	8000fcc <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d108      	bne.n	80026c8 <HAL_UART_Transmit+0x6c>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	e003      	b.n	80026d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026d0:	e02a      	b.n	8002728 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f840 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e036      	b.n	800275a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3302      	adds	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	e007      	b.n	800271a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1cf      	bne.n	80026d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f810 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e006      	b.n	800275a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b090      	sub	sp, #64	; 0x40
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	e050      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d04c      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800277c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <UART_WaitOnFlagUntilTimeout+0x30>
 8002782:	f7fe fc23 	bl	8000fcc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800278e:	429a      	cmp	r2, r3
 8002790:	d241      	bcs.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027b2:	637a      	str	r2, [r7, #52]	; 0x34
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e5      	bne.n	8002792 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e6:	623a      	str	r2, [r7, #32]
 80027e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	69f9      	ldr	r1, [r7, #28]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e5      	bne.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4013      	ands	r3, r2
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	429a      	cmp	r2, r3
 8002832:	d09f      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3740      	adds	r7, #64	; 0x40
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800287a:	f023 030c 	bic.w	r3, r3, #12
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <UART_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a8:	f7ff fa6e 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	e002      	b.n	80028b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b0:	f7ff fa56 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 80028b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <UART_SetConfig+0x118>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	0119      	lsls	r1, r3, #4
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <UART_SetConfig+0x118>)
 80028ee:	fba3 0302 	umull	r0, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2064      	movs	r0, #100	; 0x64
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <UART_SetConfig+0x118>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	4419      	add	r1, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <UART_SetConfig+0x118>)
 8002926:	fba3 0302 	umull	r0, r3, r3, r2
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	; 0x32
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <UART_SetConfig+0x118>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	440a      	add	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40013800 	.word	0x40013800
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	f000 fc9c 	bl	80032b4 <_init>
 800297c:	2600      	movs	r6, #0
 800297e:	4d0a      	ldr	r5, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08003400 	.word	0x08003400
 80029a4:	08003400 	.word	0x08003400
 80029a8:	08003400 	.word	0x08003400
 80029ac:	08003404 	.word	0x08003404

080029b0 <memset>:
 80029b0:	4603      	mov	r3, r0
 80029b2:	4402      	add	r2, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <siprintf>:
 80029c0:	b40e      	push	{r1, r2, r3}
 80029c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029c6:	b500      	push	{lr}
 80029c8:	b09c      	sub	sp, #112	; 0x70
 80029ca:	ab1d      	add	r3, sp, #116	; 0x74
 80029cc:	9002      	str	r0, [sp, #8]
 80029ce:	9006      	str	r0, [sp, #24]
 80029d0:	9107      	str	r1, [sp, #28]
 80029d2:	9104      	str	r1, [sp, #16]
 80029d4:	4808      	ldr	r0, [pc, #32]	; (80029f8 <siprintf+0x38>)
 80029d6:	4909      	ldr	r1, [pc, #36]	; (80029fc <siprintf+0x3c>)
 80029d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029dc:	9105      	str	r1, [sp, #20]
 80029de:	6800      	ldr	r0, [r0, #0]
 80029e0:	a902      	add	r1, sp, #8
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	f000 f868 	bl	8002ab8 <_svfiprintf_r>
 80029e8:	2200      	movs	r2, #0
 80029ea:	9b02      	ldr	r3, [sp, #8]
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	b01c      	add	sp, #112	; 0x70
 80029f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029f4:	b003      	add	sp, #12
 80029f6:	4770      	bx	lr
 80029f8:	20000010 	.word	0x20000010
 80029fc:	ffff0208 	.word	0xffff0208

08002a00 <__ssputs_r>:
 8002a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	688e      	ldr	r6, [r1, #8]
 8002a06:	4682      	mov	sl, r0
 8002a08:	429e      	cmp	r6, r3
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	461f      	mov	r7, r3
 8002a10:	d838      	bhi.n	8002a84 <__ssputs_r+0x84>
 8002a12:	898a      	ldrh	r2, [r1, #12]
 8002a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a18:	d032      	beq.n	8002a80 <__ssputs_r+0x80>
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	6909      	ldr	r1, [r1, #16]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	eba5 0901 	sub.w	r9, r5, r1
 8002a24:	6965      	ldr	r5, [r4, #20]
 8002a26:	444b      	add	r3, r9
 8002a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a30:	106d      	asrs	r5, r5, #1
 8002a32:	429d      	cmp	r5, r3
 8002a34:	bf38      	it	cc
 8002a36:	461d      	movcc	r5, r3
 8002a38:	0553      	lsls	r3, r2, #21
 8002a3a:	d531      	bpl.n	8002aa0 <__ssputs_r+0xa0>
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f000 fb6f 	bl	8003120 <_malloc_r>
 8002a42:	4606      	mov	r6, r0
 8002a44:	b950      	cbnz	r0, 8002a5c <__ssputs_r+0x5c>
 8002a46:	230c      	movs	r3, #12
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f8ca 3000 	str.w	r3, [sl]
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	6921      	ldr	r1, [r4, #16]
 8002a60:	f000 face 	bl	8003000 <memcpy>
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6e:	81a3      	strh	r3, [r4, #12]
 8002a70:	6126      	str	r6, [r4, #16]
 8002a72:	444e      	add	r6, r9
 8002a74:	6026      	str	r6, [r4, #0]
 8002a76:	463e      	mov	r6, r7
 8002a78:	6165      	str	r5, [r4, #20]
 8002a7a:	eba5 0509 	sub.w	r5, r5, r9
 8002a7e:	60a5      	str	r5, [r4, #8]
 8002a80:	42be      	cmp	r6, r7
 8002a82:	d900      	bls.n	8002a86 <__ssputs_r+0x86>
 8002a84:	463e      	mov	r6, r7
 8002a86:	4632      	mov	r2, r6
 8002a88:	4641      	mov	r1, r8
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	f000 fac6 	bl	800301c <memmove>
 8002a90:	68a3      	ldr	r3, [r4, #8]
 8002a92:	2000      	movs	r0, #0
 8002a94:	1b9b      	subs	r3, r3, r6
 8002a96:	60a3      	str	r3, [r4, #8]
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	4433      	add	r3, r6
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	e7db      	b.n	8002a58 <__ssputs_r+0x58>
 8002aa0:	462a      	mov	r2, r5
 8002aa2:	f000 fbb1 	bl	8003208 <_realloc_r>
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d1e1      	bne.n	8002a70 <__ssputs_r+0x70>
 8002aac:	4650      	mov	r0, sl
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	f000 face 	bl	8003050 <_free_r>
 8002ab4:	e7c7      	b.n	8002a46 <__ssputs_r+0x46>
	...

08002ab8 <_svfiprintf_r>:
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	4698      	mov	r8, r3
 8002abe:	898b      	ldrh	r3, [r1, #12]
 8002ac0:	4607      	mov	r7, r0
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	b09d      	sub	sp, #116	; 0x74
 8002aca:	d50e      	bpl.n	8002aea <_svfiprintf_r+0x32>
 8002acc:	690b      	ldr	r3, [r1, #16]
 8002ace:	b963      	cbnz	r3, 8002aea <_svfiprintf_r+0x32>
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	f000 fb25 	bl	8003120 <_malloc_r>
 8002ad6:	6028      	str	r0, [r5, #0]
 8002ad8:	6128      	str	r0, [r5, #16]
 8002ada:	b920      	cbnz	r0, 8002ae6 <_svfiprintf_r+0x2e>
 8002adc:	230c      	movs	r3, #12
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	e0d1      	b.n	8002c8a <_svfiprintf_r+0x1d2>
 8002ae6:	2340      	movs	r3, #64	; 0x40
 8002ae8:	616b      	str	r3, [r5, #20]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9309      	str	r3, [sp, #36]	; 0x24
 8002aee:	2320      	movs	r3, #32
 8002af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002af4:	2330      	movs	r3, #48	; 0x30
 8002af6:	f04f 0901 	mov.w	r9, #1
 8002afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002afe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ca4 <_svfiprintf_r+0x1ec>
 8002b02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b06:	4623      	mov	r3, r4
 8002b08:	469a      	mov	sl, r3
 8002b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b0e:	b10a      	cbz	r2, 8002b14 <_svfiprintf_r+0x5c>
 8002b10:	2a25      	cmp	r2, #37	; 0x25
 8002b12:	d1f9      	bne.n	8002b08 <_svfiprintf_r+0x50>
 8002b14:	ebba 0b04 	subs.w	fp, sl, r4
 8002b18:	d00b      	beq.n	8002b32 <_svfiprintf_r+0x7a>
 8002b1a:	465b      	mov	r3, fp
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4638      	mov	r0, r7
 8002b22:	f7ff ff6d 	bl	8002a00 <__ssputs_r>
 8002b26:	3001      	adds	r0, #1
 8002b28:	f000 80aa 	beq.w	8002c80 <_svfiprintf_r+0x1c8>
 8002b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b2e:	445a      	add	r2, fp
 8002b30:	9209      	str	r2, [sp, #36]	; 0x24
 8002b32:	f89a 3000 	ldrb.w	r3, [sl]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a2 	beq.w	8002c80 <_svfiprintf_r+0x1c8>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b46:	f10a 0a01 	add.w	sl, sl, #1
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	9307      	str	r3, [sp, #28]
 8002b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b52:	931a      	str	r3, [sp, #104]	; 0x68
 8002b54:	4654      	mov	r4, sl
 8002b56:	2205      	movs	r2, #5
 8002b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b5c:	4851      	ldr	r0, [pc, #324]	; (8002ca4 <_svfiprintf_r+0x1ec>)
 8002b5e:	f000 fa41 	bl	8002fe4 <memchr>
 8002b62:	9a04      	ldr	r2, [sp, #16]
 8002b64:	b9d8      	cbnz	r0, 8002b9e <_svfiprintf_r+0xe6>
 8002b66:	06d0      	lsls	r0, r2, #27
 8002b68:	bf44      	itt	mi
 8002b6a:	2320      	movmi	r3, #32
 8002b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b70:	0711      	lsls	r1, r2, #28
 8002b72:	bf44      	itt	mi
 8002b74:	232b      	movmi	r3, #43	; 0x2b
 8002b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b80:	d015      	beq.n	8002bae <_svfiprintf_r+0xf6>
 8002b82:	4654      	mov	r4, sl
 8002b84:	2000      	movs	r0, #0
 8002b86:	f04f 0c0a 	mov.w	ip, #10
 8002b8a:	9a07      	ldr	r2, [sp, #28]
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b92:	3b30      	subs	r3, #48	; 0x30
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d94e      	bls.n	8002c36 <_svfiprintf_r+0x17e>
 8002b98:	b1b0      	cbz	r0, 8002bc8 <_svfiprintf_r+0x110>
 8002b9a:	9207      	str	r2, [sp, #28]
 8002b9c:	e014      	b.n	8002bc8 <_svfiprintf_r+0x110>
 8002b9e:	eba0 0308 	sub.w	r3, r0, r8
 8002ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	46a2      	mov	sl, r4
 8002baa:	9304      	str	r3, [sp, #16]
 8002bac:	e7d2      	b.n	8002b54 <_svfiprintf_r+0x9c>
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	1d19      	adds	r1, r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	9103      	str	r1, [sp, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bfbb      	ittet	lt
 8002bba:	425b      	neglt	r3, r3
 8002bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8002bc0:	9307      	strge	r3, [sp, #28]
 8002bc2:	9307      	strlt	r3, [sp, #28]
 8002bc4:	bfb8      	it	lt
 8002bc6:	9204      	strlt	r2, [sp, #16]
 8002bc8:	7823      	ldrb	r3, [r4, #0]
 8002bca:	2b2e      	cmp	r3, #46	; 0x2e
 8002bcc:	d10c      	bne.n	8002be8 <_svfiprintf_r+0x130>
 8002bce:	7863      	ldrb	r3, [r4, #1]
 8002bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002bd2:	d135      	bne.n	8002c40 <_svfiprintf_r+0x188>
 8002bd4:	9b03      	ldr	r3, [sp, #12]
 8002bd6:	3402      	adds	r4, #2
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	9203      	str	r2, [sp, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bfb8      	it	lt
 8002be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002be6:	9305      	str	r3, [sp, #20]
 8002be8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002ca8 <_svfiprintf_r+0x1f0>
 8002bec:	2203      	movs	r2, #3
 8002bee:	4650      	mov	r0, sl
 8002bf0:	7821      	ldrb	r1, [r4, #0]
 8002bf2:	f000 f9f7 	bl	8002fe4 <memchr>
 8002bf6:	b140      	cbz	r0, 8002c0a <_svfiprintf_r+0x152>
 8002bf8:	2340      	movs	r3, #64	; 0x40
 8002bfa:	eba0 000a 	sub.w	r0, r0, sl
 8002bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8002c02:	9b04      	ldr	r3, [sp, #16]
 8002c04:	3401      	adds	r4, #1
 8002c06:	4303      	orrs	r3, r0
 8002c08:	9304      	str	r3, [sp, #16]
 8002c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c0e:	2206      	movs	r2, #6
 8002c10:	4826      	ldr	r0, [pc, #152]	; (8002cac <_svfiprintf_r+0x1f4>)
 8002c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c16:	f000 f9e5 	bl	8002fe4 <memchr>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d038      	beq.n	8002c90 <_svfiprintf_r+0x1d8>
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <_svfiprintf_r+0x1f8>)
 8002c20:	bb1b      	cbnz	r3, 8002c6a <_svfiprintf_r+0x1b2>
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	3307      	adds	r3, #7
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c30:	4433      	add	r3, r6
 8002c32:	9309      	str	r3, [sp, #36]	; 0x24
 8002c34:	e767      	b.n	8002b06 <_svfiprintf_r+0x4e>
 8002c36:	460c      	mov	r4, r1
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c3e:	e7a5      	b.n	8002b8c <_svfiprintf_r+0xd4>
 8002c40:	2300      	movs	r3, #0
 8002c42:	f04f 0c0a 	mov.w	ip, #10
 8002c46:	4619      	mov	r1, r3
 8002c48:	3401      	adds	r4, #1
 8002c4a:	9305      	str	r3, [sp, #20]
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c52:	3a30      	subs	r2, #48	; 0x30
 8002c54:	2a09      	cmp	r2, #9
 8002c56:	d903      	bls.n	8002c60 <_svfiprintf_r+0x1a8>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0c5      	beq.n	8002be8 <_svfiprintf_r+0x130>
 8002c5c:	9105      	str	r1, [sp, #20]
 8002c5e:	e7c3      	b.n	8002be8 <_svfiprintf_r+0x130>
 8002c60:	4604      	mov	r4, r0
 8002c62:	2301      	movs	r3, #1
 8002c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c68:	e7f0      	b.n	8002c4c <_svfiprintf_r+0x194>
 8002c6a:	ab03      	add	r3, sp, #12
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	462a      	mov	r2, r5
 8002c70:	4638      	mov	r0, r7
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <_svfiprintf_r+0x1fc>)
 8002c74:	a904      	add	r1, sp, #16
 8002c76:	f3af 8000 	nop.w
 8002c7a:	1c42      	adds	r2, r0, #1
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	d1d6      	bne.n	8002c2e <_svfiprintf_r+0x176>
 8002c80:	89ab      	ldrh	r3, [r5, #12]
 8002c82:	065b      	lsls	r3, r3, #25
 8002c84:	f53f af2c 	bmi.w	8002ae0 <_svfiprintf_r+0x28>
 8002c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c8a:	b01d      	add	sp, #116	; 0x74
 8002c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c90:	ab03      	add	r3, sp, #12
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	462a      	mov	r2, r5
 8002c96:	4638      	mov	r0, r7
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <_svfiprintf_r+0x1fc>)
 8002c9a:	a904      	add	r1, sp, #16
 8002c9c:	f000 f87c 	bl	8002d98 <_printf_i>
 8002ca0:	e7eb      	b.n	8002c7a <_svfiprintf_r+0x1c2>
 8002ca2:	bf00      	nop
 8002ca4:	080033ca 	.word	0x080033ca
 8002ca8:	080033d0 	.word	0x080033d0
 8002cac:	080033d4 	.word	0x080033d4
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	08002a01 	.word	0x08002a01

08002cb8 <_printf_common>:
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	4616      	mov	r6, r2
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	688a      	ldr	r2, [r1, #8]
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	4607      	mov	r7, r0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bfb8      	it	lt
 8002cca:	4613      	movlt	r3, r2
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd8:	b10a      	cbz	r2, 8002cde <_printf_common+0x26>
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6033      	str	r3, [r6, #0]
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	0699      	lsls	r1, r3, #26
 8002ce2:	bf42      	ittt	mi
 8002ce4:	6833      	ldrmi	r3, [r6, #0]
 8002ce6:	3302      	addmi	r3, #2
 8002ce8:	6033      	strmi	r3, [r6, #0]
 8002cea:	6825      	ldr	r5, [r4, #0]
 8002cec:	f015 0506 	ands.w	r5, r5, #6
 8002cf0:	d106      	bne.n	8002d00 <_printf_common+0x48>
 8002cf2:	f104 0a19 	add.w	sl, r4, #25
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	6832      	ldr	r2, [r6, #0]
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	42ab      	cmp	r3, r5
 8002cfe:	dc28      	bgt.n	8002d52 <_printf_common+0x9a>
 8002d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d04:	1e13      	subs	r3, r2, #0
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	bf18      	it	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	0692      	lsls	r2, r2, #26
 8002d0e:	d42d      	bmi.n	8002d6c <_printf_common+0xb4>
 8002d10:	4649      	mov	r1, r9
 8002d12:	4638      	mov	r0, r7
 8002d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d18:	47c0      	blx	r8
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d020      	beq.n	8002d60 <_printf_common+0xa8>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	68e5      	ldr	r5, [r4, #12]
 8002d22:	f003 0306 	and.w	r3, r3, #6
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf18      	it	ne
 8002d2a:	2500      	movne	r5, #0
 8002d2c:	6832      	ldr	r2, [r6, #0]
 8002d2e:	f04f 0600 	mov.w	r6, #0
 8002d32:	68a3      	ldr	r3, [r4, #8]
 8002d34:	bf08      	it	eq
 8002d36:	1aad      	subeq	r5, r5, r2
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	341a      	adds	r4, #26
 8002d4a:	42b5      	cmp	r5, r6
 8002d4c:	d11a      	bne.n	8002d84 <_printf_common+0xcc>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e008      	b.n	8002d64 <_printf_common+0xac>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4652      	mov	r2, sl
 8002d56:	4649      	mov	r1, r9
 8002d58:	4638      	mov	r0, r7
 8002d5a:	47c0      	blx	r8
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_printf_common+0xb0>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7c4      	b.n	8002cf6 <_printf_common+0x3e>
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	18e1      	adds	r1, r4, r3
 8002d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7a:	4422      	add	r2, r4
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d82:	e7c5      	b.n	8002d10 <_printf_common+0x58>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4622      	mov	r2, r4
 8002d88:	4649      	mov	r1, r9
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xa8>
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7d9      	b.n	8002d4a <_printf_common+0x92>
	...

08002d98 <_printf_i>:
 8002d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d9c:	7e0f      	ldrb	r7, [r1, #24]
 8002d9e:	4691      	mov	r9, r2
 8002da0:	2f78      	cmp	r7, #120	; 0x78
 8002da2:	4680      	mov	r8, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	469a      	mov	sl, r3
 8002da8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dae:	d807      	bhi.n	8002dc0 <_printf_i+0x28>
 8002db0:	2f62      	cmp	r7, #98	; 0x62
 8002db2:	d80a      	bhi.n	8002dca <_printf_i+0x32>
 8002db4:	2f00      	cmp	r7, #0
 8002db6:	f000 80d9 	beq.w	8002f6c <_printf_i+0x1d4>
 8002dba:	2f58      	cmp	r7, #88	; 0x58
 8002dbc:	f000 80a4 	beq.w	8002f08 <_printf_i+0x170>
 8002dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc8:	e03a      	b.n	8002e40 <_printf_i+0xa8>
 8002dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dce:	2b15      	cmp	r3, #21
 8002dd0:	d8f6      	bhi.n	8002dc0 <_printf_i+0x28>
 8002dd2:	a101      	add	r1, pc, #4	; (adr r1, 8002dd8 <_printf_i+0x40>)
 8002dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dd8:	08002e31 	.word	0x08002e31
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002dc1 	.word	0x08002dc1
 8002de4:	08002dc1 	.word	0x08002dc1
 8002de8:	08002dc1 	.word	0x08002dc1
 8002dec:	08002dc1 	.word	0x08002dc1
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002dc1 	.word	0x08002dc1
 8002df8:	08002dc1 	.word	0x08002dc1
 8002dfc:	08002dc1 	.word	0x08002dc1
 8002e00:	08002dc1 	.word	0x08002dc1
 8002e04:	08002f53 	.word	0x08002f53
 8002e08:	08002e75 	.word	0x08002e75
 8002e0c:	08002f35 	.word	0x08002f35
 8002e10:	08002dc1 	.word	0x08002dc1
 8002e14:	08002dc1 	.word	0x08002dc1
 8002e18:	08002f75 	.word	0x08002f75
 8002e1c:	08002dc1 	.word	0x08002dc1
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002dc1 	.word	0x08002dc1
 8002e28:	08002dc1 	.word	0x08002dc1
 8002e2c:	08002f3d 	.word	0x08002f3d
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	602a      	str	r2, [r5, #0]
 8002e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0a4      	b.n	8002f8e <_printf_i+0x1f6>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	6829      	ldr	r1, [r5, #0]
 8002e48:	0606      	lsls	r6, r0, #24
 8002e4a:	f101 0304 	add.w	r3, r1, #4
 8002e4e:	d50a      	bpl.n	8002e66 <_printf_i+0xce>
 8002e50:	680e      	ldr	r6, [r1, #0]
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	da03      	bge.n	8002e60 <_printf_i+0xc8>
 8002e58:	232d      	movs	r3, #45	; 0x2d
 8002e5a:	4276      	negs	r6, r6
 8002e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e60:	230a      	movs	r3, #10
 8002e62:	485e      	ldr	r0, [pc, #376]	; (8002fdc <_printf_i+0x244>)
 8002e64:	e019      	b.n	8002e9a <_printf_i+0x102>
 8002e66:	680e      	ldr	r6, [r1, #0]
 8002e68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e6c:	602b      	str	r3, [r5, #0]
 8002e6e:	bf18      	it	ne
 8002e70:	b236      	sxthne	r6, r6
 8002e72:	e7ef      	b.n	8002e54 <_printf_i+0xbc>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	1d19      	adds	r1, r3, #4
 8002e7a:	6029      	str	r1, [r5, #0]
 8002e7c:	0601      	lsls	r1, r0, #24
 8002e7e:	d501      	bpl.n	8002e84 <_printf_i+0xec>
 8002e80:	681e      	ldr	r6, [r3, #0]
 8002e82:	e002      	b.n	8002e8a <_printf_i+0xf2>
 8002e84:	0646      	lsls	r6, r0, #25
 8002e86:	d5fb      	bpl.n	8002e80 <_printf_i+0xe8>
 8002e88:	881e      	ldrh	r6, [r3, #0]
 8002e8a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2308      	moveq	r3, #8
 8002e90:	230a      	movne	r3, #10
 8002e92:	4852      	ldr	r0, [pc, #328]	; (8002fdc <_printf_i+0x244>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e9a:	6865      	ldr	r5, [r4, #4]
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	bfa8      	it	ge
 8002ea0:	6821      	ldrge	r1, [r4, #0]
 8002ea2:	60a5      	str	r5, [r4, #8]
 8002ea4:	bfa4      	itt	ge
 8002ea6:	f021 0104 	bicge.w	r1, r1, #4
 8002eaa:	6021      	strge	r1, [r4, #0]
 8002eac:	b90e      	cbnz	r6, 8002eb2 <_printf_i+0x11a>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d04d      	beq.n	8002f4e <_printf_i+0x1b6>
 8002eb2:	4615      	mov	r5, r2
 8002eb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002eb8:	fb03 6711 	mls	r7, r3, r1, r6
 8002ebc:	5dc7      	ldrb	r7, [r0, r7]
 8002ebe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ec2:	4637      	mov	r7, r6
 8002ec4:	42bb      	cmp	r3, r7
 8002ec6:	460e      	mov	r6, r1
 8002ec8:	d9f4      	bls.n	8002eb4 <_printf_i+0x11c>
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d10b      	bne.n	8002ee6 <_printf_i+0x14e>
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	07de      	lsls	r6, r3, #31
 8002ed2:	d508      	bpl.n	8002ee6 <_printf_i+0x14e>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	6861      	ldr	r1, [r4, #4]
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	bfde      	ittt	le
 8002edc:	2330      	movle	r3, #48	; 0x30
 8002ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ee6:	1b52      	subs	r2, r2, r5
 8002ee8:	6122      	str	r2, [r4, #16]
 8002eea:	464b      	mov	r3, r9
 8002eec:	4621      	mov	r1, r4
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f8cd a000 	str.w	sl, [sp]
 8002ef4:	aa03      	add	r2, sp, #12
 8002ef6:	f7ff fedf 	bl	8002cb8 <_printf_common>
 8002efa:	3001      	adds	r0, #1
 8002efc:	d14c      	bne.n	8002f98 <_printf_i+0x200>
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	b004      	add	sp, #16
 8002f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f08:	4834      	ldr	r0, [pc, #208]	; (8002fdc <_printf_i+0x244>)
 8002f0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f0e:	6829      	ldr	r1, [r5, #0]
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f16:	6029      	str	r1, [r5, #0]
 8002f18:	061d      	lsls	r5, r3, #24
 8002f1a:	d514      	bpl.n	8002f46 <_printf_i+0x1ae>
 8002f1c:	07df      	lsls	r7, r3, #31
 8002f1e:	bf44      	itt	mi
 8002f20:	f043 0320 	orrmi.w	r3, r3, #32
 8002f24:	6023      	strmi	r3, [r4, #0]
 8002f26:	b91e      	cbnz	r6, 8002f30 <_printf_i+0x198>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	2310      	movs	r3, #16
 8002f32:	e7af      	b.n	8002e94 <_printf_i+0xfc>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	2378      	movs	r3, #120	; 0x78
 8002f3e:	4828      	ldr	r0, [pc, #160]	; (8002fe0 <_printf_i+0x248>)
 8002f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f44:	e7e3      	b.n	8002f0e <_printf_i+0x176>
 8002f46:	0659      	lsls	r1, r3, #25
 8002f48:	bf48      	it	mi
 8002f4a:	b2b6      	uxthmi	r6, r6
 8002f4c:	e7e6      	b.n	8002f1c <_printf_i+0x184>
 8002f4e:	4615      	mov	r5, r2
 8002f50:	e7bb      	b.n	8002eca <_printf_i+0x132>
 8002f52:	682b      	ldr	r3, [r5, #0]
 8002f54:	6826      	ldr	r6, [r4, #0]
 8002f56:	1d18      	adds	r0, r3, #4
 8002f58:	6961      	ldr	r1, [r4, #20]
 8002f5a:	6028      	str	r0, [r5, #0]
 8002f5c:	0635      	lsls	r5, r6, #24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	d501      	bpl.n	8002f66 <_printf_i+0x1ce>
 8002f62:	6019      	str	r1, [r3, #0]
 8002f64:	e002      	b.n	8002f6c <_printf_i+0x1d4>
 8002f66:	0670      	lsls	r0, r6, #25
 8002f68:	d5fb      	bpl.n	8002f62 <_printf_i+0x1ca>
 8002f6a:	8019      	strh	r1, [r3, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4615      	mov	r5, r2
 8002f70:	6123      	str	r3, [r4, #16]
 8002f72:	e7ba      	b.n	8002eea <_printf_i+0x152>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	1d1a      	adds	r2, r3, #4
 8002f7a:	602a      	str	r2, [r5, #0]
 8002f7c:	681d      	ldr	r5, [r3, #0]
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	4628      	mov	r0, r5
 8002f82:	f000 f82f 	bl	8002fe4 <memchr>
 8002f86:	b108      	cbz	r0, 8002f8c <_printf_i+0x1f4>
 8002f88:	1b40      	subs	r0, r0, r5
 8002f8a:	6060      	str	r0, [r4, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	6123      	str	r3, [r4, #16]
 8002f90:	2300      	movs	r3, #0
 8002f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f96:	e7a8      	b.n	8002eea <_printf_i+0x152>
 8002f98:	462a      	mov	r2, r5
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	47d0      	blx	sl
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d0ab      	beq.n	8002efe <_printf_i+0x166>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	079b      	lsls	r3, r3, #30
 8002faa:	d413      	bmi.n	8002fd4 <_printf_i+0x23c>
 8002fac:	68e0      	ldr	r0, [r4, #12]
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	4298      	cmp	r0, r3
 8002fb2:	bfb8      	it	lt
 8002fb4:	4618      	movlt	r0, r3
 8002fb6:	e7a4      	b.n	8002f02 <_printf_i+0x16a>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4632      	mov	r2, r6
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	47d0      	blx	sl
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d09b      	beq.n	8002efe <_printf_i+0x166>
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	68e3      	ldr	r3, [r4, #12]
 8002fca:	9903      	ldr	r1, [sp, #12]
 8002fcc:	1a5b      	subs	r3, r3, r1
 8002fce:	42ab      	cmp	r3, r5
 8002fd0:	dcf2      	bgt.n	8002fb8 <_printf_i+0x220>
 8002fd2:	e7eb      	b.n	8002fac <_printf_i+0x214>
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	f104 0619 	add.w	r6, r4, #25
 8002fda:	e7f5      	b.n	8002fc8 <_printf_i+0x230>
 8002fdc:	080033db 	.word	0x080033db
 8002fe0:	080033ec 	.word	0x080033ec

08002fe4 <memchr>:
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	b2c9      	uxtb	r1, r1
 8002fea:	4402      	add	r2, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	d101      	bne.n	8002ff6 <memchr+0x12>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e003      	b.n	8002ffe <memchr+0x1a>
 8002ff6:	7804      	ldrb	r4, [r0, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	428c      	cmp	r4, r1
 8002ffc:	d1f6      	bne.n	8002fec <memchr+0x8>
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <memcpy>:
 8003000:	440a      	add	r2, r1
 8003002:	4291      	cmp	r1, r2
 8003004:	f100 33ff 	add.w	r3, r0, #4294967295
 8003008:	d100      	bne.n	800300c <memcpy+0xc>
 800300a:	4770      	bx	lr
 800300c:	b510      	push	{r4, lr}
 800300e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003012:	4291      	cmp	r1, r2
 8003014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003018:	d1f9      	bne.n	800300e <memcpy+0xe>
 800301a:	bd10      	pop	{r4, pc}

0800301c <memmove>:
 800301c:	4288      	cmp	r0, r1
 800301e:	b510      	push	{r4, lr}
 8003020:	eb01 0402 	add.w	r4, r1, r2
 8003024:	d902      	bls.n	800302c <memmove+0x10>
 8003026:	4284      	cmp	r4, r0
 8003028:	4623      	mov	r3, r4
 800302a:	d807      	bhi.n	800303c <memmove+0x20>
 800302c:	1e43      	subs	r3, r0, #1
 800302e:	42a1      	cmp	r1, r4
 8003030:	d008      	beq.n	8003044 <memmove+0x28>
 8003032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800303a:	e7f8      	b.n	800302e <memmove+0x12>
 800303c:	4601      	mov	r1, r0
 800303e:	4402      	add	r2, r0
 8003040:	428a      	cmp	r2, r1
 8003042:	d100      	bne.n	8003046 <memmove+0x2a>
 8003044:	bd10      	pop	{r4, pc}
 8003046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800304a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800304e:	e7f7      	b.n	8003040 <memmove+0x24>

08003050 <_free_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d040      	beq.n	80030da <_free_r+0x8a>
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f0c      	subs	r4, r1, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	18e4      	addlt	r4, r4, r3
 8003064:	f000 f910 	bl	8003288 <__malloc_lock>
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <_free_r+0x8c>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	b933      	cbnz	r3, 800307c <_free_r+0x2c>
 800306e:	6063      	str	r3, [r4, #4]
 8003070:	6014      	str	r4, [r2, #0]
 8003072:	4628      	mov	r0, r5
 8003074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003078:	f000 b90c 	b.w	8003294 <__malloc_unlock>
 800307c:	42a3      	cmp	r3, r4
 800307e:	d908      	bls.n	8003092 <_free_r+0x42>
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	1821      	adds	r1, r4, r0
 8003084:	428b      	cmp	r3, r1
 8003086:	bf01      	itttt	eq
 8003088:	6819      	ldreq	r1, [r3, #0]
 800308a:	685b      	ldreq	r3, [r3, #4]
 800308c:	1809      	addeq	r1, r1, r0
 800308e:	6021      	streq	r1, [r4, #0]
 8003090:	e7ed      	b.n	800306e <_free_r+0x1e>
 8003092:	461a      	mov	r2, r3
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b10b      	cbz	r3, 800309c <_free_r+0x4c>
 8003098:	42a3      	cmp	r3, r4
 800309a:	d9fa      	bls.n	8003092 <_free_r+0x42>
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	1850      	adds	r0, r2, r1
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d10b      	bne.n	80030bc <_free_r+0x6c>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	4401      	add	r1, r0
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	4283      	cmp	r3, r0
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	d1e0      	bne.n	8003072 <_free_r+0x22>
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4401      	add	r1, r0
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	6053      	str	r3, [r2, #4]
 80030ba:	e7da      	b.n	8003072 <_free_r+0x22>
 80030bc:	d902      	bls.n	80030c4 <_free_r+0x74>
 80030be:	230c      	movs	r3, #12
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	e7d6      	b.n	8003072 <_free_r+0x22>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6054      	str	r4, [r2, #4]
 80030d8:	e7cb      	b.n	8003072 <_free_r+0x22>
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	20000268 	.word	0x20000268

080030e0 <sbrk_aligned>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4e0e      	ldr	r6, [pc, #56]	; (800311c <sbrk_aligned+0x3c>)
 80030e4:	460c      	mov	r4, r1
 80030e6:	6831      	ldr	r1, [r6, #0]
 80030e8:	4605      	mov	r5, r0
 80030ea:	b911      	cbnz	r1, 80030f2 <sbrk_aligned+0x12>
 80030ec:	f000 f8bc 	bl	8003268 <_sbrk_r>
 80030f0:	6030      	str	r0, [r6, #0]
 80030f2:	4621      	mov	r1, r4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 f8b7 	bl	8003268 <_sbrk_r>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	d00a      	beq.n	8003114 <sbrk_aligned+0x34>
 80030fe:	1cc4      	adds	r4, r0, #3
 8003100:	f024 0403 	bic.w	r4, r4, #3
 8003104:	42a0      	cmp	r0, r4
 8003106:	d007      	beq.n	8003118 <sbrk_aligned+0x38>
 8003108:	1a21      	subs	r1, r4, r0
 800310a:	4628      	mov	r0, r5
 800310c:	f000 f8ac 	bl	8003268 <_sbrk_r>
 8003110:	3001      	adds	r0, #1
 8003112:	d101      	bne.n	8003118 <sbrk_aligned+0x38>
 8003114:	f04f 34ff 	mov.w	r4, #4294967295
 8003118:	4620      	mov	r0, r4
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	2000026c 	.word	0x2000026c

08003120 <_malloc_r>:
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	1ccd      	adds	r5, r1, #3
 8003126:	f025 0503 	bic.w	r5, r5, #3
 800312a:	3508      	adds	r5, #8
 800312c:	2d0c      	cmp	r5, #12
 800312e:	bf38      	it	cc
 8003130:	250c      	movcc	r5, #12
 8003132:	2d00      	cmp	r5, #0
 8003134:	4607      	mov	r7, r0
 8003136:	db01      	blt.n	800313c <_malloc_r+0x1c>
 8003138:	42a9      	cmp	r1, r5
 800313a:	d905      	bls.n	8003148 <_malloc_r+0x28>
 800313c:	230c      	movs	r3, #12
 800313e:	2600      	movs	r6, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4630      	mov	r0, r6
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003148:	4e2e      	ldr	r6, [pc, #184]	; (8003204 <_malloc_r+0xe4>)
 800314a:	f000 f89d 	bl	8003288 <__malloc_lock>
 800314e:	6833      	ldr	r3, [r6, #0]
 8003150:	461c      	mov	r4, r3
 8003152:	bb34      	cbnz	r4, 80031a2 <_malloc_r+0x82>
 8003154:	4629      	mov	r1, r5
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ffc2 	bl	80030e0 <sbrk_aligned>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	4604      	mov	r4, r0
 8003160:	d14d      	bne.n	80031fe <_malloc_r+0xde>
 8003162:	6834      	ldr	r4, [r6, #0]
 8003164:	4626      	mov	r6, r4
 8003166:	2e00      	cmp	r6, #0
 8003168:	d140      	bne.n	80031ec <_malloc_r+0xcc>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	4631      	mov	r1, r6
 800316e:	4638      	mov	r0, r7
 8003170:	eb04 0803 	add.w	r8, r4, r3
 8003174:	f000 f878 	bl	8003268 <_sbrk_r>
 8003178:	4580      	cmp	r8, r0
 800317a:	d13a      	bne.n	80031f2 <_malloc_r+0xd2>
 800317c:	6821      	ldr	r1, [r4, #0]
 800317e:	3503      	adds	r5, #3
 8003180:	1a6d      	subs	r5, r5, r1
 8003182:	f025 0503 	bic.w	r5, r5, #3
 8003186:	3508      	adds	r5, #8
 8003188:	2d0c      	cmp	r5, #12
 800318a:	bf38      	it	cc
 800318c:	250c      	movcc	r5, #12
 800318e:	4638      	mov	r0, r7
 8003190:	4629      	mov	r1, r5
 8003192:	f7ff ffa5 	bl	80030e0 <sbrk_aligned>
 8003196:	3001      	adds	r0, #1
 8003198:	d02b      	beq.n	80031f2 <_malloc_r+0xd2>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	442b      	add	r3, r5
 800319e:	6023      	str	r3, [r4, #0]
 80031a0:	e00e      	b.n	80031c0 <_malloc_r+0xa0>
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	1b52      	subs	r2, r2, r5
 80031a6:	d41e      	bmi.n	80031e6 <_malloc_r+0xc6>
 80031a8:	2a0b      	cmp	r2, #11
 80031aa:	d916      	bls.n	80031da <_malloc_r+0xba>
 80031ac:	1961      	adds	r1, r4, r5
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	6025      	str	r5, [r4, #0]
 80031b2:	bf18      	it	ne
 80031b4:	6059      	strne	r1, [r3, #4]
 80031b6:	6863      	ldr	r3, [r4, #4]
 80031b8:	bf08      	it	eq
 80031ba:	6031      	streq	r1, [r6, #0]
 80031bc:	5162      	str	r2, [r4, r5]
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	4638      	mov	r0, r7
 80031c2:	f104 060b 	add.w	r6, r4, #11
 80031c6:	f000 f865 	bl	8003294 <__malloc_unlock>
 80031ca:	f026 0607 	bic.w	r6, r6, #7
 80031ce:	1d23      	adds	r3, r4, #4
 80031d0:	1af2      	subs	r2, r6, r3
 80031d2:	d0b6      	beq.n	8003142 <_malloc_r+0x22>
 80031d4:	1b9b      	subs	r3, r3, r6
 80031d6:	50a3      	str	r3, [r4, r2]
 80031d8:	e7b3      	b.n	8003142 <_malloc_r+0x22>
 80031da:	6862      	ldr	r2, [r4, #4]
 80031dc:	42a3      	cmp	r3, r4
 80031de:	bf0c      	ite	eq
 80031e0:	6032      	streq	r2, [r6, #0]
 80031e2:	605a      	strne	r2, [r3, #4]
 80031e4:	e7ec      	b.n	80031c0 <_malloc_r+0xa0>
 80031e6:	4623      	mov	r3, r4
 80031e8:	6864      	ldr	r4, [r4, #4]
 80031ea:	e7b2      	b.n	8003152 <_malloc_r+0x32>
 80031ec:	4634      	mov	r4, r6
 80031ee:	6876      	ldr	r6, [r6, #4]
 80031f0:	e7b9      	b.n	8003166 <_malloc_r+0x46>
 80031f2:	230c      	movs	r3, #12
 80031f4:	4638      	mov	r0, r7
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	f000 f84c 	bl	8003294 <__malloc_unlock>
 80031fc:	e7a1      	b.n	8003142 <_malloc_r+0x22>
 80031fe:	6025      	str	r5, [r4, #0]
 8003200:	e7de      	b.n	80031c0 <_malloc_r+0xa0>
 8003202:	bf00      	nop
 8003204:	20000268 	.word	0x20000268

08003208 <_realloc_r>:
 8003208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320c:	4680      	mov	r8, r0
 800320e:	4614      	mov	r4, r2
 8003210:	460e      	mov	r6, r1
 8003212:	b921      	cbnz	r1, 800321e <_realloc_r+0x16>
 8003214:	4611      	mov	r1, r2
 8003216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	f7ff bf81 	b.w	8003120 <_malloc_r>
 800321e:	b92a      	cbnz	r2, 800322c <_realloc_r+0x24>
 8003220:	f7ff ff16 	bl	8003050 <_free_r>
 8003224:	4625      	mov	r5, r4
 8003226:	4628      	mov	r0, r5
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800322c:	f000 f838 	bl	80032a0 <_malloc_usable_size_r>
 8003230:	4284      	cmp	r4, r0
 8003232:	4607      	mov	r7, r0
 8003234:	d802      	bhi.n	800323c <_realloc_r+0x34>
 8003236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800323a:	d812      	bhi.n	8003262 <_realloc_r+0x5a>
 800323c:	4621      	mov	r1, r4
 800323e:	4640      	mov	r0, r8
 8003240:	f7ff ff6e 	bl	8003120 <_malloc_r>
 8003244:	4605      	mov	r5, r0
 8003246:	2800      	cmp	r0, #0
 8003248:	d0ed      	beq.n	8003226 <_realloc_r+0x1e>
 800324a:	42bc      	cmp	r4, r7
 800324c:	4622      	mov	r2, r4
 800324e:	4631      	mov	r1, r6
 8003250:	bf28      	it	cs
 8003252:	463a      	movcs	r2, r7
 8003254:	f7ff fed4 	bl	8003000 <memcpy>
 8003258:	4631      	mov	r1, r6
 800325a:	4640      	mov	r0, r8
 800325c:	f7ff fef8 	bl	8003050 <_free_r>
 8003260:	e7e1      	b.n	8003226 <_realloc_r+0x1e>
 8003262:	4635      	mov	r5, r6
 8003264:	e7df      	b.n	8003226 <_realloc_r+0x1e>
	...

08003268 <_sbrk_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	2300      	movs	r3, #0
 800326c:	4d05      	ldr	r5, [pc, #20]	; (8003284 <_sbrk_r+0x1c>)
 800326e:	4604      	mov	r4, r0
 8003270:	4608      	mov	r0, r1
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	f7fd fce2 	bl	8000c3c <_sbrk>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_sbrk_r+0x1a>
 800327c:	682b      	ldr	r3, [r5, #0]
 800327e:	b103      	cbz	r3, 8003282 <_sbrk_r+0x1a>
 8003280:	6023      	str	r3, [r4, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20000270 	.word	0x20000270

08003288 <__malloc_lock>:
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <__malloc_lock+0x8>)
 800328a:	f000 b811 	b.w	80032b0 <__retarget_lock_acquire_recursive>
 800328e:	bf00      	nop
 8003290:	20000274 	.word	0x20000274

08003294 <__malloc_unlock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_unlock+0x8>)
 8003296:	f000 b80c 	b.w	80032b2 <__retarget_lock_release_recursive>
 800329a:	bf00      	nop
 800329c:	20000274 	.word	0x20000274

080032a0 <_malloc_usable_size_r>:
 80032a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a4:	1f18      	subs	r0, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfbc      	itt	lt
 80032aa:	580b      	ldrlt	r3, [r1, r0]
 80032ac:	18c0      	addlt	r0, r0, r3
 80032ae:	4770      	bx	lr

080032b0 <__retarget_lock_acquire_recursive>:
 80032b0:	4770      	bx	lr

080032b2 <__retarget_lock_release_recursive>:
 80032b2:	4770      	bx	lr

080032b4 <_init>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	bf00      	nop
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr

080032c0 <_fini>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	bf00      	nop
 80032c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c6:	bc08      	pop	{r3}
 80032c8:	469e      	mov	lr, r3
 80032ca:	4770      	bx	lr
