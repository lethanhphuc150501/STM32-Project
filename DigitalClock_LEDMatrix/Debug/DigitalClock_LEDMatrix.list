
DigitalClock_LEDMatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002924  08002924  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002924  08002924  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800292c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000030  0800295c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800295c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084c6  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001634  00000000  00000000  0002851f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00029b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016354  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009673  00000000  00000000  00041174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082283  00000000  00000000  0004a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cca6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  000ccabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e8 	.word	0x080028e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080028e8 	.word	0x080028e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f8ba 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f86e 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f4 	bl	8000344 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f8a6 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000160:	4830      	ldr	r0, [pc, #192]	; (8000224 <main+0xd8>)
 8000162:	f001 fffd 	bl	8002160 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
 8000166:	200a      	movs	r0, #10
 8000168:	f000 ff14 	bl	8000f94 <setTimer0>
  setTimer1(10);
 800016c:	200a      	movs	r0, #10
 800016e:	f000 ff2b 	bl	8000fc8 <setTimer1>
  setTimer2(10);
 8000172:	200a      	movs	r0, #10
 8000174:	f000 ff42 	bl	8000ffc <setTimer2>
  setTimer3(10);
 8000178:	200a      	movs	r0, #10
 800017a:	f000 ff59 	bl	8001030 <setTimer3>
  while (1)
  {
	  if (getTimer0Flag())
 800017e:	f000 ffc7 	bl	8001110 <getTimer0Flag>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d00d      	beq.n	80001a4 <main+0x58>
	  {
		  updateMatrixBuffer();
 8000188:	f000 fed2 	bl	8000f30 <updateMatrixBuffer>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800018c:	2120      	movs	r1, #32
 800018e:	4826      	ldr	r0, [pc, #152]	; (8000228 <main+0xdc>)
 8000190:	f001 fb9e 	bl	80018d0 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000194:	2110      	movs	r1, #16
 8000196:	4824      	ldr	r0, [pc, #144]	; (8000228 <main+0xdc>)
 8000198:	f001 fb9a 	bl	80018d0 <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 800019c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a0:	f000 fef8 	bl	8000f94 <setTimer0>
	  }

	  if (getTimer1Flag())
 80001a4:	f000 ffbe 	bl	8001124 <getTimer1Flag>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d022      	beq.n	80001f4 <main+0xa8>
	  {
		  if (index_led >= MAX_LED)
 80001ae:	4b1f      	ldr	r3, [pc, #124]	; (800022c <main+0xe0>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2206      	movs	r2, #6
 80001b4:	4293      	cmp	r3, r2
 80001b6:	db02      	blt.n	80001be <main+0x72>
		  {
			  index_led = 0;
 80001b8:	4b1c      	ldr	r3, [pc, #112]	; (800022c <main+0xe0>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
		  }
		  update7SEG(index_led++);
 80001be:	4b1b      	ldr	r3, [pc, #108]	; (800022c <main+0xe0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	1c5a      	adds	r2, r3, #1
 80001c4:	4919      	ldr	r1, [pc, #100]	; (800022c <main+0xe0>)
 80001c6:	600a      	str	r2, [r1, #0]
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 faab 	bl	8000724 <update7SEG>

		  if (index_led_matrix >= MAX_LED_MATRIX)
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <main+0xe4>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2208      	movs	r2, #8
 80001d4:	4293      	cmp	r3, r2
 80001d6:	db02      	blt.n	80001de <main+0x92>
		  {
			  index_led_matrix = 0;
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <main+0xe4>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
		  }
		  updateLEDMatrix(index_led_matrix++);
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <main+0xe4>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	1c5a      	adds	r2, r3, #1
 80001e4:	4912      	ldr	r1, [pc, #72]	; (8000230 <main+0xe4>)
 80001e6:	600a      	str	r2, [r1, #0]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fcd3 	bl	8000b94 <updateLEDMatrix>

		  setTimer1(10);
 80001ee:	200a      	movs	r0, #10
 80001f0:	f000 feea 	bl	8000fc8 <setTimer1>
	  }

	  if (getTimer2Flag())
 80001f4:	f000 ffa0 	bl	8001138 <getTimer2Flag>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d005      	beq.n	800020a <main+0xbe>
	  {
		  updateClockBuffer();
 80001fe:	f000 fbaf 	bl	8000960 <updateClockBuffer>
		  setTimer2(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 fef9 	bl	8000ffc <setTimer2>
	  }

	  if (getTimer3Flag())
 800020a:	f000 ff9f 	bl	800114c <getTimer3Flag>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0b4      	beq.n	800017e <main+0x32>
	  {
		  updateMatrixBuffer();
 8000214:	f000 fe8c 	bl	8000f30 <updateMatrixBuffer>
		  setTimer3(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 ff08 	bl	8001030 <setTimer3>
	  if (getTimer0Flag())
 8000220:	e7ad      	b.n	800017e <main+0x32>
 8000222:	bf00      	nop
 8000224:	2000004c 	.word	0x2000004c
 8000228:	40010800 	.word	0x40010800
 800022c:	20000094 	.word	0x20000094
 8000230:	200000a4 	.word	0x200000a4

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fb48 	bl	80028d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fb4a 	bl	8001904 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000276:	f000 fe87 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fdb8 	bl	8001e08 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 fe73 	bl	8000f88 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_TIM2_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e0:	2209      	movs	r2, #9
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_TIM2_Init+0x94>)
 80002f2:	f001 fee5 	bl	80020c0 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 fe44 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_TIM2_Init+0x94>)
 800030e:	f002 f87b 	bl	8002408 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 fe36 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_TIM2_Init+0x94>)
 800032a:	f002 fa47 	bl	80027bc <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000334:	f000 fe28 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000004c 	.word	0x2000004c

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <MX_GPIO_Init+0xa0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a21      	ldr	r2, [pc, #132]	; (80003e4 <MX_GPIO_Init+0xa0>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <MX_GPIO_Init+0xa0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <MX_GPIO_Init+0xa0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_GPIO_Init+0xa0>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_GPIO_Init+0xa0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|DOT_Pin
 8000388:	2200      	movs	r2, #0
 800038a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800038e:	4816      	ldr	r0, [pc, #88]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000390:	f001 fa86 	bl	80018a0 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|EN5_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000394:	2200      	movs	r2, #0
 8000396:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800039a:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_GPIO_Init+0xa8>)
 800039c:	f001 fa80 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin ENM2_Pin DOT_Pin
                           LED_RED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin EN5_Pin ENM3_Pin
                           ENM4_Pin ENM5_Pin ENM6_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|ENM2_Pin|DOT_Pin
 80003a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80003a4:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|EN5_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <MX_GPIO_Init+0xa4>)
 80003ba:	f001 f8f5 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ENM7_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80003be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c2:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ENM7_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2302      	movs	r3, #2
 80003ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003d8:	f001 f8e6 	bl	80015a8 <HAL_GPIO_Init>

}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	timer_run();
 80003f8:	f000 fe34 	bl	8001064 <timer_run>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <display7SEG>:

void display7SEG(int num)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	switch (num)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b09      	cmp	r3, #9
 8000410:	f200 8180 	bhi.w	8000714 <display7SEG+0x310>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <display7SEG+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000445 	.word	0x08000445
 8000420:	0800048d 	.word	0x0800048d
 8000424:	080004d5 	.word	0x080004d5
 8000428:	0800051d 	.word	0x0800051d
 800042c:	08000565 	.word	0x08000565
 8000430:	080005ad 	.word	0x080005ad
 8000434:	080005f5 	.word	0x080005f5
 8000438:	0800063d 	.word	0x0800063d
 800043c:	08000685 	.word	0x08000685
 8000440:	080006cd 	.word	0x080006cd
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	48b5      	ldr	r0, [pc, #724]	; (8000720 <display7SEG+0x31c>)
 800044a:	f001 fa29 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	48b3      	ldr	r0, [pc, #716]	; (8000720 <display7SEG+0x31c>)
 8000454:	f001 fa24 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	48b0      	ldr	r0, [pc, #704]	; (8000720 <display7SEG+0x31c>)
 800045e:	f001 fa1f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2108      	movs	r1, #8
 8000466:	48ae      	ldr	r0, [pc, #696]	; (8000720 <display7SEG+0x31c>)
 8000468:	f001 fa1a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2110      	movs	r1, #16
 8000470:	48ab      	ldr	r0, [pc, #684]	; (8000720 <display7SEG+0x31c>)
 8000472:	f001 fa15 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	48a9      	ldr	r0, [pc, #676]	; (8000720 <display7SEG+0x31c>)
 800047c:	f001 fa10 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	48a6      	ldr	r0, [pc, #664]	; (8000720 <display7SEG+0x31c>)
 8000486:	f001 fa0b 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 800048a:	e144      	b.n	8000716 <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	48a3      	ldr	r0, [pc, #652]	; (8000720 <display7SEG+0x31c>)
 8000492:	f001 fa05 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	48a1      	ldr	r0, [pc, #644]	; (8000720 <display7SEG+0x31c>)
 800049c:	f001 fa00 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2104      	movs	r1, #4
 80004a4:	489e      	ldr	r0, [pc, #632]	; (8000720 <display7SEG+0x31c>)
 80004a6:	f001 f9fb 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2108      	movs	r1, #8
 80004ae:	489c      	ldr	r0, [pc, #624]	; (8000720 <display7SEG+0x31c>)
 80004b0:	f001 f9f6 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	4899      	ldr	r0, [pc, #612]	; (8000720 <display7SEG+0x31c>)
 80004ba:	f001 f9f1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2120      	movs	r1, #32
 80004c2:	4897      	ldr	r0, [pc, #604]	; (8000720 <display7SEG+0x31c>)
 80004c4:	f001 f9ec 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	4894      	ldr	r0, [pc, #592]	; (8000720 <display7SEG+0x31c>)
 80004ce:	f001 f9e7 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 80004d2:	e120      	b.n	8000716 <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	4891      	ldr	r0, [pc, #580]	; (8000720 <display7SEG+0x31c>)
 80004da:	f001 f9e1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2102      	movs	r1, #2
 80004e2:	488f      	ldr	r0, [pc, #572]	; (8000720 <display7SEG+0x31c>)
 80004e4:	f001 f9dc 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2104      	movs	r1, #4
 80004ec:	488c      	ldr	r0, [pc, #560]	; (8000720 <display7SEG+0x31c>)
 80004ee:	f001 f9d7 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	488a      	ldr	r0, [pc, #552]	; (8000720 <display7SEG+0x31c>)
 80004f8:	f001 f9d2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	4887      	ldr	r0, [pc, #540]	; (8000720 <display7SEG+0x31c>)
 8000502:	f001 f9cd 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4885      	ldr	r0, [pc, #532]	; (8000720 <display7SEG+0x31c>)
 800050c:	f001 f9c8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4882      	ldr	r0, [pc, #520]	; (8000720 <display7SEG+0x31c>)
 8000516:	f001 f9c3 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 800051a:	e0fc      	b.n	8000716 <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2101      	movs	r1, #1
 8000520:	487f      	ldr	r0, [pc, #508]	; (8000720 <display7SEG+0x31c>)
 8000522:	f001 f9bd 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	487d      	ldr	r0, [pc, #500]	; (8000720 <display7SEG+0x31c>)
 800052c:	f001 f9b8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2104      	movs	r1, #4
 8000534:	487a      	ldr	r0, [pc, #488]	; (8000720 <display7SEG+0x31c>)
 8000536:	f001 f9b3 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4878      	ldr	r0, [pc, #480]	; (8000720 <display7SEG+0x31c>)
 8000540:	f001 f9ae 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4875      	ldr	r0, [pc, #468]	; (8000720 <display7SEG+0x31c>)
 800054a:	f001 f9a9 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	4873      	ldr	r0, [pc, #460]	; (8000720 <display7SEG+0x31c>)
 8000554:	f001 f9a4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4870      	ldr	r0, [pc, #448]	; (8000720 <display7SEG+0x31c>)
 800055e:	f001 f99f 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 8000562:	e0d8      	b.n	8000716 <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	486d      	ldr	r0, [pc, #436]	; (8000720 <display7SEG+0x31c>)
 800056a:	f001 f999 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2102      	movs	r1, #2
 8000572:	486b      	ldr	r0, [pc, #428]	; (8000720 <display7SEG+0x31c>)
 8000574:	f001 f994 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2104      	movs	r1, #4
 800057c:	4868      	ldr	r0, [pc, #416]	; (8000720 <display7SEG+0x31c>)
 800057e:	f001 f98f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2108      	movs	r1, #8
 8000586:	4866      	ldr	r0, [pc, #408]	; (8000720 <display7SEG+0x31c>)
 8000588:	f001 f98a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4863      	ldr	r0, [pc, #396]	; (8000720 <display7SEG+0x31c>)
 8000592:	f001 f985 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	4861      	ldr	r0, [pc, #388]	; (8000720 <display7SEG+0x31c>)
 800059c:	f001 f980 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	485e      	ldr	r0, [pc, #376]	; (8000720 <display7SEG+0x31c>)
 80005a6:	f001 f97b 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 80005aa:	e0b4      	b.n	8000716 <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	485b      	ldr	r0, [pc, #364]	; (8000720 <display7SEG+0x31c>)
 80005b2:	f001 f975 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2102      	movs	r1, #2
 80005ba:	4859      	ldr	r0, [pc, #356]	; (8000720 <display7SEG+0x31c>)
 80005bc:	f001 f970 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	4856      	ldr	r0, [pc, #344]	; (8000720 <display7SEG+0x31c>)
 80005c6:	f001 f96b 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4854      	ldr	r0, [pc, #336]	; (8000720 <display7SEG+0x31c>)
 80005d0:	f001 f966 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4851      	ldr	r0, [pc, #324]	; (8000720 <display7SEG+0x31c>)
 80005da:	f001 f961 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	484f      	ldr	r0, [pc, #316]	; (8000720 <display7SEG+0x31c>)
 80005e4:	f001 f95c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	484c      	ldr	r0, [pc, #304]	; (8000720 <display7SEG+0x31c>)
 80005ee:	f001 f957 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 80005f2:	e090      	b.n	8000716 <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4849      	ldr	r0, [pc, #292]	; (8000720 <display7SEG+0x31c>)
 80005fa:	f001 f951 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2102      	movs	r1, #2
 8000602:	4847      	ldr	r0, [pc, #284]	; (8000720 <display7SEG+0x31c>)
 8000604:	f001 f94c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	4844      	ldr	r0, [pc, #272]	; (8000720 <display7SEG+0x31c>)
 800060e:	f001 f947 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2108      	movs	r1, #8
 8000616:	4842      	ldr	r0, [pc, #264]	; (8000720 <display7SEG+0x31c>)
 8000618:	f001 f942 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	483f      	ldr	r0, [pc, #252]	; (8000720 <display7SEG+0x31c>)
 8000622:	f001 f93d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	483d      	ldr	r0, [pc, #244]	; (8000720 <display7SEG+0x31c>)
 800062c:	f001 f938 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	483a      	ldr	r0, [pc, #232]	; (8000720 <display7SEG+0x31c>)
 8000636:	f001 f933 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 800063a:	e06c      	b.n	8000716 <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	4837      	ldr	r0, [pc, #220]	; (8000720 <display7SEG+0x31c>)
 8000642:	f001 f92d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2102      	movs	r1, #2
 800064a:	4835      	ldr	r0, [pc, #212]	; (8000720 <display7SEG+0x31c>)
 800064c:	f001 f928 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2104      	movs	r1, #4
 8000654:	4832      	ldr	r0, [pc, #200]	; (8000720 <display7SEG+0x31c>)
 8000656:	f001 f923 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	4830      	ldr	r0, [pc, #192]	; (8000720 <display7SEG+0x31c>)
 8000660:	f001 f91e 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2110      	movs	r1, #16
 8000668:	482d      	ldr	r0, [pc, #180]	; (8000720 <display7SEG+0x31c>)
 800066a:	f001 f919 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	482b      	ldr	r0, [pc, #172]	; (8000720 <display7SEG+0x31c>)
 8000674:	f001 f914 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <display7SEG+0x31c>)
 800067e:	f001 f90f 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 8000682:	e048      	b.n	8000716 <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4825      	ldr	r0, [pc, #148]	; (8000720 <display7SEG+0x31c>)
 800068a:	f001 f909 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2102      	movs	r1, #2
 8000692:	4823      	ldr	r0, [pc, #140]	; (8000720 <display7SEG+0x31c>)
 8000694:	f001 f904 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	4820      	ldr	r0, [pc, #128]	; (8000720 <display7SEG+0x31c>)
 800069e:	f001 f8ff 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	481e      	ldr	r0, [pc, #120]	; (8000720 <display7SEG+0x31c>)
 80006a8:	f001 f8fa 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <display7SEG+0x31c>)
 80006b2:	f001 f8f5 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <display7SEG+0x31c>)
 80006bc:	f001 f8f0 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <display7SEG+0x31c>)
 80006c6:	f001 f8eb 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 80006ca:	e024      	b.n	8000716 <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <display7SEG+0x31c>)
 80006d2:	f001 f8e5 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2102      	movs	r1, #2
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <display7SEG+0x31c>)
 80006dc:	f001 f8e0 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2104      	movs	r1, #4
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <display7SEG+0x31c>)
 80006e6:	f001 f8db 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <display7SEG+0x31c>)
 80006f0:	f001 f8d6 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <display7SEG+0x31c>)
 80006fa:	f001 f8d1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <display7SEG+0x31c>)
 8000704:	f001 f8cc 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <display7SEG+0x31c>)
 800070e:	f001 f8c7 	bl	80018a0 <HAL_GPIO_WritePin>
			break;
 8000712:	e000      	b.n	8000716 <display7SEG+0x312>
		  default:
			  break;
 8000714:	bf00      	nop
	}
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010c00 	.word	0x40010c00

08000724 <update7SEG>:

void update7SEG(int index)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	switch (index)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b05      	cmp	r3, #5
 8000730:	f200 810c 	bhi.w	800094c <update7SEG+0x228>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <update7SEG+0x18>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	08000755 	.word	0x08000755
 8000740:	080007a9 	.word	0x080007a9
 8000744:	080007fd 	.word	0x080007fd
 8000748:	08000851 	.word	0x08000851
 800074c:	080008a5 	.word	0x080008a5
 8000750:	080008f9 	.word	0x080008f9
	{
		case 0:
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075a:	487f      	ldr	r0, [pc, #508]	; (8000958 <update7SEG+0x234>)
 800075c:	f001 f8a0 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	487c      	ldr	r0, [pc, #496]	; (8000958 <update7SEG+0x234>)
 8000768:	f001 f89a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	4879      	ldr	r0, [pc, #484]	; (8000958 <update7SEG+0x234>)
 8000774:	f001 f894 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	4876      	ldr	r0, [pc, #472]	; (8000958 <update7SEG+0x234>)
 8000780:	f001 f88e 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4873      	ldr	r0, [pc, #460]	; (8000958 <update7SEG+0x234>)
 800078a:	f001 f889 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4871      	ldr	r0, [pc, #452]	; (8000958 <update7SEG+0x234>)
 8000794:	f001 f884 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000798:	4a70      	ldr	r2, [pc, #448]	; (800095c <update7SEG+0x238>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe2f 	bl	8000404 <display7SEG>
			break;
 80007a6:	e0d2      	b.n	800094e <update7SEG+0x22a>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	486a      	ldr	r0, [pc, #424]	; (8000958 <update7SEG+0x234>)
 80007ae:	f001 f877 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	4867      	ldr	r0, [pc, #412]	; (8000958 <update7SEG+0x234>)
 80007ba:	f001 f871 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c4:	4864      	ldr	r0, [pc, #400]	; (8000958 <update7SEG+0x234>)
 80007c6:	f001 f86b 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	4861      	ldr	r0, [pc, #388]	; (8000958 <update7SEG+0x234>)
 80007d2:	f001 f865 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007dc:	485e      	ldr	r0, [pc, #376]	; (8000958 <update7SEG+0x234>)
 80007de:	f001 f85f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	485c      	ldr	r0, [pc, #368]	; (8000958 <update7SEG+0x234>)
 80007e8:	f001 f85a 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 80007ec:	4a5b      	ldr	r2, [pc, #364]	; (800095c <update7SEG+0x238>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe05 	bl	8000404 <display7SEG>
			break;
 80007fa:	e0a8      	b.n	800094e <update7SEG+0x22a>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4855      	ldr	r0, [pc, #340]	; (8000958 <update7SEG+0x234>)
 8000802:	f001 f84d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4853      	ldr	r0, [pc, #332]	; (8000958 <update7SEG+0x234>)
 800080c:	f001 f848 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <update7SEG+0x234>)
 8000818:	f001 f842 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	484d      	ldr	r0, [pc, #308]	; (8000958 <update7SEG+0x234>)
 8000824:	f001 f83c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082e:	484a      	ldr	r0, [pc, #296]	; (8000958 <update7SEG+0x234>)
 8000830:	f001 f836 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	4847      	ldr	r0, [pc, #284]	; (8000958 <update7SEG+0x234>)
 800083c:	f001 f830 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000840:	4a46      	ldr	r2, [pc, #280]	; (800095c <update7SEG+0x238>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fddb 	bl	8000404 <display7SEG>
			break;
 800084e:	e07e      	b.n	800094e <update7SEG+0x22a>
		case 3:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	4840      	ldr	r0, [pc, #256]	; (8000958 <update7SEG+0x234>)
 8000858:	f001 f822 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	483d      	ldr	r0, [pc, #244]	; (8000958 <update7SEG+0x234>)
 8000862:	f001 f81d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	483b      	ldr	r0, [pc, #236]	; (8000958 <update7SEG+0x234>)
 800086c:	f001 f818 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <update7SEG+0x234>)
 8000878:	f001 f812 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <update7SEG+0x234>)
 8000884:	f001 f80c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	4832      	ldr	r0, [pc, #200]	; (8000958 <update7SEG+0x234>)
 8000890:	f001 f806 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <update7SEG+0x238>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdb1 	bl	8000404 <display7SEG>
			break;
 80008a2:	e054      	b.n	800094e <update7SEG+0x22a>
		case 4:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	482b      	ldr	r0, [pc, #172]	; (8000958 <update7SEG+0x234>)
 80008ac:	f000 fff8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b6:	4828      	ldr	r0, [pc, #160]	; (8000958 <update7SEG+0x234>)
 80008b8:	f000 fff2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4825      	ldr	r0, [pc, #148]	; (8000958 <update7SEG+0x234>)
 80008c2:	f000 ffed 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <update7SEG+0x234>)
 80008cc:	f000 ffe8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <update7SEG+0x234>)
 80008d8:	f000 ffe2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e2:	481d      	ldr	r0, [pc, #116]	; (8000958 <update7SEG+0x234>)
 80008e4:	f000 ffdc 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <update7SEG+0x238>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fd87 	bl	8000404 <display7SEG>
			break;
 80008f6:	e02a      	b.n	800094e <update7SEG+0x22a>
		case 5:
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	4816      	ldr	r0, [pc, #88]	; (8000958 <update7SEG+0x234>)
 8000900:	f000 ffce 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <update7SEG+0x234>)
 800090c:	f000 ffc8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <update7SEG+0x234>)
 8000918:	f000 ffc2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <update7SEG+0x234>)
 8000922:	f000 ffbd 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <update7SEG+0x234>)
 800092c:	f000 ffb8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <update7SEG+0x234>)
 8000938:	f000 ffb2 	bl	80018a0 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <update7SEG+0x238>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fd5d 	bl	8000404 <display7SEG>
			break;
 800094a:	e000      	b.n	800094e <update7SEG+0x22a>
		default:
			break;
 800094c:	bf00      	nop
	}
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010800 	.word	0x40010800
 800095c:	20000000 	.word	0x20000000

08000960 <updateClockBuffer>:

void updateClockBuffer()
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	second++;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <updateClockBuffer+0xec>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a38      	ldr	r2, [pc, #224]	; (8000a4c <updateClockBuffer+0xec>)
 800096c:	6013      	str	r3, [r2, #0]
	if (second >= 60)
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <updateClockBuffer+0xec>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b3b      	cmp	r3, #59	; 0x3b
 8000974:	dd07      	ble.n	8000986 <updateClockBuffer+0x26>
	{
		second = 0;
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <updateClockBuffer+0xec>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
		minute++;
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <updateClockBuffer+0xf0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a33      	ldr	r2, [pc, #204]	; (8000a50 <updateClockBuffer+0xf0>)
 8000984:	6013      	str	r3, [r2, #0]
	}
	if (minute >= 60)
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <updateClockBuffer+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b3b      	cmp	r3, #59	; 0x3b
 800098c:	dd07      	ble.n	800099e <updateClockBuffer+0x3e>
	{
		minute = 0;
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <updateClockBuffer+0xf0>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		hour++;
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <updateClockBuffer+0xf4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a2e      	ldr	r2, [pc, #184]	; (8000a54 <updateClockBuffer+0xf4>)
 800099c:	6013      	str	r3, [r2, #0]
	}
	if (hour >= 24)
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <updateClockBuffer+0xf4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b17      	cmp	r3, #23
 80009a4:	dd02      	ble.n	80009ac <updateClockBuffer+0x4c>
	{
		hour = 0;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <updateClockBuffer+0xf4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
	}
	led_buffer[4] = second / 10;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <updateClockBuffer+0xec>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <updateClockBuffer+0xf8>)
 80009b2:	fb82 1203 	smull	r1, r2, r2, r3
 80009b6:	1092      	asrs	r2, r2, #2
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <updateClockBuffer+0xfc>)
 80009be:	6113      	str	r3, [r2, #16]
	led_buffer[5] = second % 10;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <updateClockBuffer+0xec>)
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <updateClockBuffer+0xf8>)
 80009c6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ca:	109a      	asrs	r2, r3, #2
 80009cc:	17cb      	asrs	r3, r1, #31
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	1aca      	subs	r2, r1, r3
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <updateClockBuffer+0xfc>)
 80009dc:	615a      	str	r2, [r3, #20]
	led_buffer[2] = minute / 10;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <updateClockBuffer+0xf0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <updateClockBuffer+0xf8>)
 80009e4:	fb82 1203 	smull	r1, r2, r2, r3
 80009e8:	1092      	asrs	r2, r2, #2
 80009ea:	17db      	asrs	r3, r3, #31
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <updateClockBuffer+0xfc>)
 80009f0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <updateClockBuffer+0xf0>)
 80009f4:	6819      	ldr	r1, [r3, #0]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <updateClockBuffer+0xf8>)
 80009f8:	fb83 2301 	smull	r2, r3, r3, r1
 80009fc:	109a      	asrs	r2, r3, #2
 80009fe:	17cb      	asrs	r3, r1, #31
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1aca      	subs	r2, r1, r3
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <updateClockBuffer+0xfc>)
 8000a0e:	60da      	str	r2, [r3, #12]
	led_buffer[0] = hour / 10;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <updateClockBuffer+0xf4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <updateClockBuffer+0xf8>)
 8000a16:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1a:	1092      	asrs	r2, r2, #2
 8000a1c:	17db      	asrs	r3, r3, #31
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <updateClockBuffer+0xfc>)
 8000a22:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <updateClockBuffer+0xf4>)
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <updateClockBuffer+0xf8>)
 8000a2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a2e:	109a      	asrs	r2, r3, #2
 8000a30:	17cb      	asrs	r3, r1, #31
 8000a32:	1ad2      	subs	r2, r2, r3
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	1aca      	subs	r2, r1, r3
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <updateClockBuffer+0xfc>)
 8000a40:	605a      	str	r2, [r3, #4]
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000a0 	.word	0x200000a0
 8000a50:	2000009c 	.word	0x2000009c
 8000a54:	20000098 	.word	0x20000098
 8000a58:	66666667 	.word	0x66666667
 8000a5c:	20000000 	.word	0x20000000

08000a60 <displayLEDMtrix>:

void displayLEDMtrix(uint8_t value)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if (value & (1U << 0))
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <displayLEDMtrix+0x22>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	4845      	ldr	r0, [pc, #276]	; (8000b90 <displayLEDMtrix+0x130>)
 8000a7c:	f000 ff10 	bl	80018a0 <HAL_GPIO_WritePin>
 8000a80:	e005      	b.n	8000a8e <displayLEDMtrix+0x2e>
	else
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	4841      	ldr	r0, [pc, #260]	; (8000b90 <displayLEDMtrix+0x130>)
 8000a8a:	f000 ff09 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 1))
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <displayLEDMtrix+0x46>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9e:	483c      	ldr	r0, [pc, #240]	; (8000b90 <displayLEDMtrix+0x130>)
 8000aa0:	f000 fefe 	bl	80018a0 <HAL_GPIO_WritePin>
 8000aa4:	e005      	b.n	8000ab2 <displayLEDMtrix+0x52>
	else
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	4838      	ldr	r0, [pc, #224]	; (8000b90 <displayLEDMtrix+0x130>)
 8000aae:	f000 fef7 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 2))
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <displayLEDMtrix+0x6a>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	4833      	ldr	r0, [pc, #204]	; (8000b90 <displayLEDMtrix+0x130>)
 8000ac4:	f000 feec 	bl	80018a0 <HAL_GPIO_WritePin>
 8000ac8:	e005      	b.n	8000ad6 <displayLEDMtrix+0x76>
	else
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	482f      	ldr	r0, [pc, #188]	; (8000b90 <displayLEDMtrix+0x130>)
 8000ad2:	f000 fee5 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 3))
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <displayLEDMtrix+0x8e>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae6:	482a      	ldr	r0, [pc, #168]	; (8000b90 <displayLEDMtrix+0x130>)
 8000ae8:	f000 feda 	bl	80018a0 <HAL_GPIO_WritePin>
 8000aec:	e005      	b.n	8000afa <displayLEDMtrix+0x9a>
	else
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af4:	4826      	ldr	r0, [pc, #152]	; (8000b90 <displayLEDMtrix+0x130>)
 8000af6:	f000 fed3 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 4))
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d006      	beq.n	8000b12 <displayLEDMtrix+0xb2>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b0c:	f000 fec8 	bl	80018a0 <HAL_GPIO_WritePin>
 8000b10:	e005      	b.n	8000b1e <displayLEDMtrix+0xbe>
	else
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	481d      	ldr	r0, [pc, #116]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b1a:	f000 fec1 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 5))
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <displayLEDMtrix+0xd6>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b30:	f000 feb6 	bl	80018a0 <HAL_GPIO_WritePin>
 8000b34:	e005      	b.n	8000b42 <displayLEDMtrix+0xe2>
	else
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b3e:	f000 feaf 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 6))
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <displayLEDMtrix+0xfa>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b54:	f000 fea4 	bl	80018a0 <HAL_GPIO_WritePin>
 8000b58:	e005      	b.n	8000b66 <displayLEDMtrix+0x106>
	else
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b62:	f000 fe9d 	bl	80018a0 <HAL_GPIO_WritePin>

	if (value & (1U << 7))
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da06      	bge.n	8000b7c <displayLEDMtrix+0x11c>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b76:	f000 fe93 	bl	80018a0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
}
 8000b7a:	e005      	b.n	8000b88 <displayLEDMtrix+0x128>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <displayLEDMtrix+0x130>)
 8000b84:	f000 fe8c 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <updateLEDMatrix>:

void updateLEDMatrix(int index)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	switch (index)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b07      	cmp	r3, #7
 8000ba0:	f200 81ba 	bhi.w	8000f18 <updateLEDMatrix+0x384>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <updateLEDMatrix+0x18>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bcd 	.word	0x08000bcd
 8000bb0:	08000c35 	.word	0x08000c35
 8000bb4:	08000c9d 	.word	0x08000c9d
 8000bb8:	08000d05 	.word	0x08000d05
 8000bbc:	08000d6d 	.word	0x08000d6d
 8000bc0:	08000dd5 	.word	0x08000dd5
 8000bc4:	08000e3d 	.word	0x08000e3d
 8000bc8:	08000eb1 	.word	0x08000eb1
	{
		case 0:
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	48b4      	ldr	r0, [pc, #720]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000bd2:	f000 fe65 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	48b2      	ldr	r0, [pc, #712]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000bde:	f000 fe5f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be8:	48af      	ldr	r0, [pc, #700]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000bea:	f000 fe59 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	48ac      	ldr	r0, [pc, #688]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000bf6:	f000 fe53 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	48a9      	ldr	r0, [pc, #676]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c02:	f000 fe4d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2108      	movs	r1, #8
 8000c0a:	48a7      	ldr	r0, [pc, #668]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c0c:	f000 fe48 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2104      	movs	r1, #4
 8000c14:	48a4      	ldr	r0, [pc, #656]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c16:	f000 fe43 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	48a2      	ldr	r0, [pc, #648]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c20:	f000 fe3e 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000c24:	4aa1      	ldr	r2, [pc, #644]	; (8000eac <updateLEDMatrix+0x318>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff17 	bl	8000a60 <displayLEDMtrix>
			break;
 8000c32:	e172      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	489b      	ldr	r0, [pc, #620]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c3a:	f000 fe31 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4898      	ldr	r0, [pc, #608]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000c44:	f000 fe2c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4e:	4896      	ldr	r0, [pc, #600]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c50:	f000 fe26 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5a:	4893      	ldr	r0, [pc, #588]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c5c:	f000 fe20 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	4890      	ldr	r0, [pc, #576]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c68:	f000 fe1a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c72:	488d      	ldr	r0, [pc, #564]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c74:	f000 fe14 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	488a      	ldr	r0, [pc, #552]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c7e:	f000 fe0f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2104      	movs	r1, #4
 8000c86:	4888      	ldr	r0, [pc, #544]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000c88:	f000 fe0a 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000c8c:	4a87      	ldr	r2, [pc, #540]	; (8000eac <updateLEDMatrix+0x318>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fee3 	bl	8000a60 <displayLEDMtrix>
			break;
 8000c9a:	e13e      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 2:
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	4881      	ldr	r0, [pc, #516]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000ca2:	f000 fdfd 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2102      	movs	r1, #2
 8000caa:	487f      	ldr	r0, [pc, #508]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000cac:	f000 fdf8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	487b      	ldr	r0, [pc, #492]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000cb6:	f000 fdf3 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc0:	4879      	ldr	r0, [pc, #484]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000cc2:	f000 fded 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ccc:	4876      	ldr	r0, [pc, #472]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000cce:	f000 fde7 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd8:	4873      	ldr	r0, [pc, #460]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000cda:	f000 fde1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	4870      	ldr	r0, [pc, #448]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000ce6:	f000 fddb 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2108      	movs	r1, #8
 8000cee:	486e      	ldr	r0, [pc, #440]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000cf0:	f000 fdd6 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000cf4:	4a6d      	ldr	r2, [pc, #436]	; (8000eac <updateLEDMatrix+0x318>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff feaf 	bl	8000a60 <displayLEDMtrix>
			break;
 8000d02:	e10a      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 3:
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2108      	movs	r1, #8
 8000d08:	4867      	ldr	r0, [pc, #412]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d0a:	f000 fdc9 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2104      	movs	r1, #4
 8000d12:	4865      	ldr	r0, [pc, #404]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d14:	f000 fdc4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4862      	ldr	r0, [pc, #392]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d1e:	f000 fdbf 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	485f      	ldr	r0, [pc, #380]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000d28:	f000 fdba 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	485d      	ldr	r0, [pc, #372]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d34:	f000 fdb4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	485a      	ldr	r0, [pc, #360]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d40:	f000 fdae 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	4857      	ldr	r0, [pc, #348]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d4c:	f000 fda8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d56:	4854      	ldr	r0, [pc, #336]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d58:	f000 fda2 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000d5c:	4a53      	ldr	r2, [pc, #332]	; (8000eac <updateLEDMatrix+0x318>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe7b 	bl	8000a60 <displayLEDMtrix>
			break;
 8000d6a:	e0d6      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 4:
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d72:	484d      	ldr	r0, [pc, #308]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d74:	f000 fd94 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	484a      	ldr	r0, [pc, #296]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d7e:	f000 fd8f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2104      	movs	r1, #4
 8000d86:	4848      	ldr	r0, [pc, #288]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d88:	f000 fd8a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4845      	ldr	r0, [pc, #276]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000d92:	f000 fd85 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4842      	ldr	r0, [pc, #264]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000d9c:	f000 fd80 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4840      	ldr	r0, [pc, #256]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000da8:	f000 fd7a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db2:	483d      	ldr	r0, [pc, #244]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000db4:	f000 fd74 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000dc0:	f000 fd6e 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000dc4:	4a39      	ldr	r2, [pc, #228]	; (8000eac <updateLEDMatrix+0x318>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe47 	bl	8000a60 <displayLEDMtrix>
			break;
 8000dd2:	e0a2      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 5:
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000ddc:	f000 fd60 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de6:	4830      	ldr	r0, [pc, #192]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000de8:	f000 fd5a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2108      	movs	r1, #8
 8000df0:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000df2:	f000 fd55 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2104      	movs	r1, #4
 8000dfa:	482b      	ldr	r0, [pc, #172]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000dfc:	f000 fd50 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2102      	movs	r1, #2
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e06:	f000 fd4b 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4825      	ldr	r0, [pc, #148]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000e10:	f000 fd46 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e1c:	f000 fd40 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4820      	ldr	r0, [pc, #128]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e28:	f000 fd3a 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <updateLEDMatrix+0x318>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe13 	bl	8000a60 <displayLEDMtrix>
			break;
 8000e3a:	e06e      	b.n	8000f1a <updateLEDMatrix+0x386>
		case 6:
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e42:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e44:	f000 fd2c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e50:	f000 fd26 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e5c:	f000 fd20 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2108      	movs	r1, #8
 8000e64:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e66:	f000 fd1b 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e70:	f000 fd16 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2102      	movs	r1, #2
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e7a:	f000 fd11 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <updateLEDMatrix+0x310>)
 8000e84:	f000 fd0c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <updateLEDMatrix+0x314>)
 8000e90:	f000 fd06 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <updateLEDMatrix+0x318>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fddf 	bl	8000a60 <displayLEDMtrix>
			break;
 8000ea2:	e03a      	b.n	8000f1a <updateLEDMatrix+0x386>
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	20000018 	.word	0x20000018
		case 7:
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <updateLEDMatrix+0x390>)
 8000eb8:	f000 fcf2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <updateLEDMatrix+0x390>)
 8000ec4:	f000 fcec 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <updateLEDMatrix+0x390>)
 8000ed0:	f000 fce6 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <updateLEDMatrix+0x390>)
 8000edc:	f000 fce0 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <updateLEDMatrix+0x390>)
 8000ee6:	f000 fcdb 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2104      	movs	r1, #4
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <updateLEDMatrix+0x390>)
 8000ef0:	f000 fcd6 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <updateLEDMatrix+0x390>)
 8000efa:	f000 fcd1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <updateLEDMatrix+0x394>)
 8000f04:	f000 fccc 	bl	80018a0 <HAL_GPIO_WritePin>
			displayLEDMtrix(matrix_buffer[index]);
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <updateLEDMatrix+0x398>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fda5 	bl	8000a60 <displayLEDMtrix>
			break;
 8000f16:	e000      	b.n	8000f1a <updateLEDMatrix+0x386>
		default:
			break;
 8000f18:	bf00      	nop
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	20000018 	.word	0x20000018

08000f30 <updateMatrixBuffer>:

void updateMatrixBuffer()
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
	uint8_t temp = matrix_buffer[0];
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	matrix_buffer[0] = matrix_buffer[1];
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f3e:	785a      	ldrb	r2, [r3, #1]
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f42:	701a      	strb	r2, [r3, #0]
	matrix_buffer[1] = matrix_buffer[2];
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f46:	789a      	ldrb	r2, [r3, #2]
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f4a:	705a      	strb	r2, [r3, #1]
	matrix_buffer[2] = matrix_buffer[3];
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f4e:	78da      	ldrb	r2, [r3, #3]
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f52:	709a      	strb	r2, [r3, #2]
	matrix_buffer[3] = matrix_buffer[4];
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f56:	791a      	ldrb	r2, [r3, #4]
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f5a:	70da      	strb	r2, [r3, #3]
	matrix_buffer[4] = matrix_buffer[5];
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f5e:	795a      	ldrb	r2, [r3, #5]
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f62:	711a      	strb	r2, [r3, #4]
	matrix_buffer[5] = matrix_buffer[6];
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f66:	799a      	ldrb	r2, [r3, #6]
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f6a:	715a      	strb	r2, [r3, #5]
	matrix_buffer[6] = matrix_buffer[7];
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f6e:	79da      	ldrb	r2, [r3, #7]
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f72:	719a      	strb	r2, [r3, #6]
	matrix_buffer[7] = temp;
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <updateMatrixBuffer+0x54>)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	71d3      	strb	r3, [r2, #7]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000018 	.word	0x20000018

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <setTimer0>:
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0 (int duration)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <setTimer0+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <setTimer0+0x2c>)
 8000fa8:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <setTimer0+0x30>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000020 	.word	0x20000020
 8000fc0:	200000a8 	.word	0x200000a8
 8000fc4:	200000ac 	.word	0x200000ac

08000fc8 <setTimer1>:
void setTimer1 (int duration)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <setTimer1+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <setTimer1+0x2c>)
 8000fdc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <setTimer1+0x30>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000020 	.word	0x20000020
 8000ff4:	200000b0 	.word	0x200000b0
 8000ff8:	200000b4 	.word	0x200000b4

08000ffc <setTimer2>:
void setTimer2 (int duration)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <setTimer2+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb92 f3f3 	sdiv	r3, r2, r3
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <setTimer2+0x2c>)
 8001010:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <setTimer2+0x30>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000020 	.word	0x20000020
 8001028:	200000b8 	.word	0x200000b8
 800102c:	200000bc 	.word	0x200000bc

08001030 <setTimer3>:
void setTimer3 (int duration)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <setTimer3+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <setTimer3+0x2c>)
 8001044:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <setTimer3+0x30>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000020 	.word	0x20000020
 800105c:	200000c0 	.word	0x200000c0
 8001060:	200000c4 	.word	0x200000c4

08001064 <timer_run>:
void timer_run()
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	if (timer0_counter > 0)
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <timer_run+0x8c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd0b      	ble.n	8001088 <timer_run+0x24>
	{
		timer0_counter--;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <timer_run+0x8c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <timer_run+0x8c>)
 8001078:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0)
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <timer_run+0x8c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc02      	bgt.n	8001088 <timer_run+0x24>
		{
			timer0_flag = 1;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <timer_run+0x90>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer1_counter > 0)
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <timer_run+0x94>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd0b      	ble.n	80010a8 <timer_run+0x44>
	{
		timer1_counter--;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <timer_run+0x94>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <timer_run+0x94>)
 8001098:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <timer_run+0x94>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dc02      	bgt.n	80010a8 <timer_run+0x44>
		{
			timer1_flag = 1;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <timer_run+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0)
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <timer_run+0x9c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd0b      	ble.n	80010c8 <timer_run+0x64>
	{
		timer2_counter--;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <timer_run+0x9c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <timer_run+0x9c>)
 80010b8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <timer_run+0x9c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dc02      	bgt.n	80010c8 <timer_run+0x64>
		{
			timer2_flag = 1;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <timer_run+0xa0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0)
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <timer_run+0xa4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd0b      	ble.n	80010e8 <timer_run+0x84>
	{
		timer3_counter--;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <timer_run+0xa4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <timer_run+0xa4>)
 80010d8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <timer_run+0xa4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dc02      	bgt.n	80010e8 <timer_run+0x84>
		{
			timer3_flag = 1;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <timer_run+0xa8>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	200000ac 	.word	0x200000ac
 80010f8:	200000b0 	.word	0x200000b0
 80010fc:	200000b4 	.word	0x200000b4
 8001100:	200000b8 	.word	0x200000b8
 8001104:	200000bc 	.word	0x200000bc
 8001108:	200000c0 	.word	0x200000c0
 800110c:	200000c4 	.word	0x200000c4

08001110 <getTimer0Flag>:

int getTimer0Flag()
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	return timer0_flag;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <getTimer0Flag+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	200000ac 	.word	0x200000ac

08001124 <getTimer1Flag>:

int getTimer1Flag()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return timer1_flag;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <getTimer1Flag+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	200000b4 	.word	0x200000b4

08001138 <getTimer2Flag>:
int getTimer2Flag()
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return timer2_flag;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <getTimer2Flag+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	200000bc 	.word	0x200000bc

0800114c <getTimer3Flag>:
int getTimer3Flag()
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	return timer3_flag;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <getTimer3Flag+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	200000c4 	.word	0x200000c4

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_MspInit+0x5c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_MspInit+0x60>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_MspInit+0x60>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d4:	d113      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	201c      	movs	r0, #28
 80011f4:	f000 f9a1 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f8:	201c      	movs	r0, #28
 80011fa:	f000 f9ba 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f87f 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM2_IRQHandler+0x10>)
 8001262:	f000 ffc9 	bl	80021f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000004c 	.word	0x2000004c

08001270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff fff8 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001282:	490c      	ldr	r1, [pc, #48]	; (80012b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001298:	4c09      	ldr	r4, [pc, #36]	; (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f001 faf3 	bl	8002890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7fe ff4f 	bl	800014c <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80012b8:	0800292c 	.word	0x0800292c
  ldr r2, =_sbss
 80012bc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80012c0:	200000cc 	.word	0x200000cc

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f923 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff ff3c 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93b 	bl	800158e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f903 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000024 	.word	0x20000024
 800134c:	2000002c 	.word	0x2000002c
 8001350:	20000028 	.word	0x20000028

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <HAL_IncTick+0x20>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	2000002c 	.word	0x2000002c
 8001374:	200000c8 	.word	0x200000c8

08001378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	200000c8 	.word	0x200000c8

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4906      	ldr	r1, [pc, #24]	; (8001424 <__NVIC_EnableIRQ+0x34>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff90 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff2d 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff42 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff35 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b08b      	sub	sp, #44	; 0x2c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e161      	b.n	8001880 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015bc:	2201      	movs	r2, #1
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 8150 	bne.w	800187a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a97      	ldr	r2, [pc, #604]	; (800183c <HAL_GPIO_Init+0x294>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d05e      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015e4:	4a95      	ldr	r2, [pc, #596]	; (800183c <HAL_GPIO_Init+0x294>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d875      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 80015ea:	4a95      	ldr	r2, [pc, #596]	; (8001840 <HAL_GPIO_Init+0x298>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d058      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015f0:	4a93      	ldr	r2, [pc, #588]	; (8001840 <HAL_GPIO_Init+0x298>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d86f      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 80015f6:	4a93      	ldr	r2, [pc, #588]	; (8001844 <HAL_GPIO_Init+0x29c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d052      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015fc:	4a91      	ldr	r2, [pc, #580]	; (8001844 <HAL_GPIO_Init+0x29c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d869      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 8001602:	4a91      	ldr	r2, [pc, #580]	; (8001848 <HAL_GPIO_Init+0x2a0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d04c      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 8001608:	4a8f      	ldr	r2, [pc, #572]	; (8001848 <HAL_GPIO_Init+0x2a0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d863      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 800160e:	4a8f      	ldr	r2, [pc, #572]	; (800184c <HAL_GPIO_Init+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d046      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 8001614:	4a8d      	ldr	r2, [pc, #564]	; (800184c <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d85d      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d82a      	bhi.n	8001674 <HAL_GPIO_Init+0xcc>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d859      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <HAL_GPIO_Init+0x80>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	080016a3 	.word	0x080016a3
 800162c:	0800167d 	.word	0x0800167d
 8001630:	0800168f 	.word	0x0800168f
 8001634:	080016d1 	.word	0x080016d1
 8001638:	080016d7 	.word	0x080016d7
 800163c:	080016d7 	.word	0x080016d7
 8001640:	080016d7 	.word	0x080016d7
 8001644:	080016d7 	.word	0x080016d7
 8001648:	080016d7 	.word	0x080016d7
 800164c:	080016d7 	.word	0x080016d7
 8001650:	080016d7 	.word	0x080016d7
 8001654:	080016d7 	.word	0x080016d7
 8001658:	080016d7 	.word	0x080016d7
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016d7 	.word	0x080016d7
 8001664:	080016d7 	.word	0x080016d7
 8001668:	080016d7 	.word	0x080016d7
 800166c:	08001685 	.word	0x08001685
 8001670:	08001699 	.word	0x08001699
 8001674:	4a76      	ldr	r2, [pc, #472]	; (8001850 <HAL_GPIO_Init+0x2a8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167a:	e02c      	b.n	80016d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e029      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	3304      	adds	r3, #4
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e024      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	3308      	adds	r3, #8
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e01f      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	330c      	adds	r3, #12
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e01a      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016aa:	2304      	movs	r3, #4
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e013      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	611a      	str	r2, [r3, #16]
          break;
 80016c2:	e009      	b.n	80016d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	615a      	str	r2, [r3, #20]
          break;
 80016ce:	e003      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          break;
 80016d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d801      	bhi.n	80016e2 <HAL_GPIO_Init+0x13a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	e001      	b.n	80016e6 <HAL_GPIO_Init+0x13e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	d802      	bhi.n	80016f4 <HAL_GPIO_Init+0x14c>
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x152>
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3b08      	subs	r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	210f      	movs	r1, #15
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	6a39      	ldr	r1, [r7, #32]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	431a      	orrs	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80a9 	beq.w	800187a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x2ac>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a49      	ldr	r2, [pc, #292]	; (8001854 <HAL_GPIO_Init+0x2ac>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_GPIO_Init+0x2ac>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <HAL_GPIO_Init+0x2b0>)
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3d      	ldr	r2, [pc, #244]	; (800185c <HAL_GPIO_Init+0x2b4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00d      	beq.n	8001788 <HAL_GPIO_Init+0x1e0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_GPIO_Init+0x2b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <HAL_GPIO_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <HAL_GPIO_Init+0x2bc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_GPIO_Init+0x1d8>
 800177c:	2302      	movs	r3, #2
 800177e:	e004      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001780:	2303      	movs	r3, #3
 8001782:	e002      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_GPIO_Init+0x1e2>
 8001788:	2300      	movs	r3, #0
 800178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178c:	f002 0203 	and.w	r2, r2, #3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4093      	lsls	r3, r2
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800179a:	492f      	ldr	r1, [pc, #188]	; (8001858 <HAL_GPIO_Init+0x2b0>)
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	492b      	ldr	r1, [pc, #172]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4927      	ldr	r1, [pc, #156]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4921      	ldr	r1, [pc, #132]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	491d      	ldr	r1, [pc, #116]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4917      	ldr	r1, [pc, #92]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4913      	ldr	r1, [pc, #76]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 800181c:	4013      	ands	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01f      	beq.n	800186c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	490d      	ldr	r1, [pc, #52]	; (8001868 <HAL_GPIO_Init+0x2c0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e01f      	b.n	800187a <HAL_GPIO_Init+0x2d2>
 800183a:	bf00      	nop
 800183c:	10320000 	.word	0x10320000
 8001840:	10310000 	.word	0x10310000
 8001844:	10220000 	.word	0x10220000
 8001848:	10210000 	.word	0x10210000
 800184c:	10120000 	.word	0x10120000
 8001850:	10110000 	.word	0x10110000
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00
 8001864:	40011000 	.word	0x40011000
 8001868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_GPIO_Init+0x2f4>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <HAL_GPIO_Init+0x2f4>)
 8001876:	4013      	ands	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae96 	bne.w	80015bc <HAL_GPIO_Init+0x14>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	; 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43d9      	mvns	r1, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e272      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001930:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x12c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d168      	bne.n	8001a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e24c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x76>
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e02e      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7a      	ldr	r2, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbc>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fcca 	bl	8001378 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fcc6 	bl	8001378 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e200      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fcb6 	bl	8001378 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fcb2 	bl	8001378 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1ec      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1c0      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fc6b 	bl	8001378 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fc67 	bl	8001378 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1a1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4927      	ldr	r1, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc4a 	bl	8001378 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc46 	bl	8001378 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e180      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03a      	beq.n	8001b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fc2a 	bl	8001378 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc26 	bl	8001378 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e160      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fa9c 	bl	8002084 <RCC_Delay>
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fc10 	bl	8001378 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fc0c 	bl	8001378 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e146      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	42420000 	.word	0x42420000
 8001b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a6 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fbcd 	bl	8001378 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff fbc9 	bl	8001378 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e103      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x356>
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fb7d 	bl	8001378 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff fb79 	bl	8001378 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0b1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x37e>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb67 	bl	8001378 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fb63 	bl	8001378 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d061      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d146      	bne.n	8001d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fb37 	bl	8001378 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fb33 	bl	8001378 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e06d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb07 	bl	8001378 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb03 	bl	8001378 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46a>
 8001d8c:	e035      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff faf0 	bl	8001378 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff faec 	bl	8001378 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e026      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x498>
 8001dba:	e01e      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e019      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x500>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d0      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d040      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e073      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff fa3e 	bl	8001378 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff fa3a 	bl	8001378 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e053      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f99c 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08002900 	.word	0x08002900
 8001fd4:	20000024 	.word	0x20000024
 8001fd8:	20000028 	.word	0x20000028

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200a:	e027      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	e027      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0c5b      	lsrs	r3, r3, #17
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e004      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	693b      	ldr	r3, [r7, #16]
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	007a1200 	.word	0x007a1200
 8002078:	08002910 	.word	0x08002910
 800207c:	08002920 	.word	0x08002920
 8002080:	003d0900 	.word	0x003d0900

08002084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <RCC_Delay+0x34>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <RCC_Delay+0x38>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a5b      	lsrs	r3, r3, #9
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a0:	bf00      	nop
  }
  while (Delay --);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	60fa      	str	r2, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <RCC_Delay+0x1c>
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000024 	.word	0x20000024
 80020bc:	10624dd3 	.word	0x10624dd3

080020c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e041      	b.n	8002156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff f86c 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f000 fa6e 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e035      	b.n	80021e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_TIM_Base_Start_IT+0x4e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d004      	beq.n	80021ae <HAL_TIM_Base_Start_IT+0x4e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_TIM_Base_Start_IT+0x94>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d111      	bne.n	80021d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b06      	cmp	r3, #6
 80021be:	d010      	beq.n	80021e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d0:	e007      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40000400 	.word	0x40000400

080021f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0202 	mvn.w	r2, #2
 8002224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f9b4 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9a7 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f9b6 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0204 	mvn.w	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f98a 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f97d 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f98c 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0208 	mvn.w	r2, #8
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f960 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f953 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f962 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f936 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f929 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f938 	bl	80025ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0201 	mvn.w	r2, #1
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe f83a 	bl	80003f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa6b 	bl	800287e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8fc 	bl	80025cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0220 	mvn.w	r2, #32
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa36 	bl	800286c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_TIM_ConfigClockSource+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e0b4      	b.n	800258e <HAL_TIM_ConfigClockSource+0x186>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245c:	d03e      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0xd4>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	f200 8087 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	f000 8086 	beq.w	800257a <HAL_TIM_ConfigClockSource+0x172>
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	d87f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b70      	cmp	r3, #112	; 0x70
 8002476:	d01a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0xa6>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d87b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b60      	cmp	r3, #96	; 0x60
 800247e:	d050      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x11a>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d877      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b50      	cmp	r3, #80	; 0x50
 8002486:	d03c      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xfa>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d873      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d058      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x13a>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d86f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b30      	cmp	r3, #48	; 0x30
 8002496:	d064      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d86b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b20      	cmp	r3, #32
 800249e:	d060      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d867      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d05a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	e062      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f000 f95e 	bl	800277e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
      break;
 80024da:	e04f      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f000 f947 	bl	800277e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024fe:	609a      	str	r2, [r3, #8]
      break;
 8002500:	e03c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f8be 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2150      	movs	r1, #80	; 0x50
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f915 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002520:	e02c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8dc 	bl	80026ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2160      	movs	r1, #96	; 0x60
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f905 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002540:	e01c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f89e 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f8f5 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002560:	e00c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 f8ec 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002572:	e003      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e000      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
	...

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x28>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x28>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <TIM_Base_SetConfig+0xac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0x52>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0x52>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <TIM_Base_SetConfig+0xac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d103      	bne.n	8002678 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	615a      	str	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40000400 	.word	0x40000400

08002690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 030a 	bic.w	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0210 	bic.w	r2, r3, #16
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	031b      	lsls	r3, r3, #12
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	f043 0307 	orr.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	609a      	str	r2, [r3, #8]
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e041      	b.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d004      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10c      	bne.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400

0800286c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <__libc_init_array>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	2600      	movs	r6, #0
 8002894:	4d0c      	ldr	r5, [pc, #48]	; (80028c8 <__libc_init_array+0x38>)
 8002896:	4c0d      	ldr	r4, [pc, #52]	; (80028cc <__libc_init_array+0x3c>)
 8002898:	1b64      	subs	r4, r4, r5
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	42a6      	cmp	r6, r4
 800289e:	d109      	bne.n	80028b4 <__libc_init_array+0x24>
 80028a0:	f000 f822 	bl	80028e8 <_init>
 80028a4:	2600      	movs	r6, #0
 80028a6:	4d0a      	ldr	r5, [pc, #40]	; (80028d0 <__libc_init_array+0x40>)
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <__libc_init_array+0x44>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	42a6      	cmp	r6, r4
 80028b0:	d105      	bne.n	80028be <__libc_init_array+0x2e>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b8:	4798      	blx	r3
 80028ba:	3601      	adds	r6, #1
 80028bc:	e7ee      	b.n	800289c <__libc_init_array+0xc>
 80028be:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c2:	4798      	blx	r3
 80028c4:	3601      	adds	r6, #1
 80028c6:	e7f2      	b.n	80028ae <__libc_init_array+0x1e>
 80028c8:	08002924 	.word	0x08002924
 80028cc:	08002924 	.word	0x08002924
 80028d0:	08002924 	.word	0x08002924
 80028d4:	08002928 	.word	0x08002928

080028d8 <memset>:
 80028d8:	4603      	mov	r3, r0
 80028da:	4402      	add	r2, r0
 80028dc:	4293      	cmp	r3, r2
 80028de:	d100      	bne.n	80028e2 <memset+0xa>
 80028e0:	4770      	bx	lr
 80028e2:	f803 1b01 	strb.w	r1, [r3], #1
 80028e6:	e7f9      	b.n	80028dc <memset+0x4>

080028e8 <_init>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr

080028f4 <_fini>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr
